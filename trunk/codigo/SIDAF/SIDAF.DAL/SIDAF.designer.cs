#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIDAF.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SIDAF")]
	public partial class SIDAFDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCaixa(Caixa instance);
    partial void UpdateCaixa(Caixa instance);
    partial void DeleteCaixa(Caixa instance);
    partial void InsertVenda(Venda instance);
    partial void UpdateVenda(Venda instance);
    partial void DeleteVenda(Venda instance);
    partial void InsertCidade(Cidade instance);
    partial void UpdateCidade(Cidade instance);
    partial void DeleteCidade(Cidade instance);
    partial void InsertCliente(Cliente instance);
    partial void UpdateCliente(Cliente instance);
    partial void DeleteCliente(Cliente instance);
    partial void InsertCompra(Compra instance);
    partial void UpdateCompra(Compra instance);
    partial void DeleteCompra(Compra instance);
    partial void InsertDescarte(Descarte instance);
    partial void UpdateDescarte(Descarte instance);
    partial void DeleteDescarte(Descarte instance);
    partial void InsertEmpresa(Empresa instance);
    partial void UpdateEmpresa(Empresa instance);
    partial void DeleteEmpresa(Empresa instance);
    partial void InsertEndereco(Endereco instance);
    partial void UpdateEndereco(Endereco instance);
    partial void DeleteEndereco(Endereco instance);
    partial void InsertEspecificacao(Especificacao instance);
    partial void UpdateEspecificacao(Especificacao instance);
    partial void DeleteEspecificacao(Especificacao instance);
    partial void InsertEspecificacaoPedido(EspecificacaoPedido instance);
    partial void UpdateEspecificacaoPedido(EspecificacaoPedido instance);
    partial void DeleteEspecificacaoPedido(EspecificacaoPedido instance);
    partial void Insertestado(estado instance);
    partial void Updateestado(estado instance);
    partial void Deleteestado(estado instance);
    partial void InsertEstorno(Estorno instance);
    partial void UpdateEstorno(Estorno instance);
    partial void DeleteEstorno(Estorno instance);
    partial void InsertFornecedor(Fornecedor instance);
    partial void UpdateFornecedor(Fornecedor instance);
    partial void DeleteFornecedor(Fornecedor instance);
    partial void InsertFuncionario(Funcionario instance);
    partial void UpdateFuncionario(Funcionario instance);
    partial void DeleteFuncionario(Funcionario instance);
    partial void InsertInstituicao(Instituicao instance);
    partial void UpdateInstituicao(Instituicao instance);
    partial void DeleteInstituicao(Instituicao instance);
    partial void InsertItemDescarte(ItemDescarte instance);
    partial void UpdateItemDescarte(ItemDescarte instance);
    partial void DeleteItemDescarte(ItemDescarte instance);
    partial void InsertItemEstoque(ItemEstoque instance);
    partial void UpdateItemEstoque(ItemEstoque instance);
    partial void DeleteItemEstoque(ItemEstoque instance);
    partial void InsertItemEstorno(ItemEstorno instance);
    partial void UpdateItemEstorno(ItemEstorno instance);
    partial void DeleteItemEstorno(ItemEstorno instance);
    partial void InsertItemNotaFiscal(ItemNotaFiscal instance);
    partial void UpdateItemNotaFiscal(ItemNotaFiscal instance);
    partial void DeleteItemNotaFiscal(ItemNotaFiscal instance);
    partial void InsertItemVenda(ItemVenda instance);
    partial void UpdateItemVenda(ItemVenda instance);
    partial void DeleteItemVenda(ItemVenda instance);
    partial void InsertLicitacao(Licitacao instance);
    partial void UpdateLicitacao(Licitacao instance);
    partial void DeleteLicitacao(Licitacao instance);
    partial void InsertLote(Lote instance);
    partial void UpdateLote(Lote instance);
    partial void DeleteLote(Lote instance);
    partial void InsertMovimentacao(Movimentacao instance);
    partial void UpdateMovimentacao(Movimentacao instance);
    partial void DeleteMovimentacao(Movimentacao instance);
    partial void InsertNotaFiscal(NotaFiscal instance);
    partial void UpdateNotaFiscal(NotaFiscal instance);
    partial void DeleteNotaFiscal(NotaFiscal instance);
    partial void Insertpai(pai instance);
    partial void Updatepai(pai instance);
    partial void Deletepai(pai instance);
    partial void InsertPedido(Pedido instance);
    partial void UpdatePedido(Pedido instance);
    partial void DeletePedido(Pedido instance);
    partial void InsertPessoa(Pessoa instance);
    partial void UpdatePessoa(Pessoa instance);
    partial void DeletePessoa(Pessoa instance);
    partial void InsertProduto(Produto instance);
    partial void UpdateProduto(Produto instance);
    partial void DeleteProduto(Produto instance);
    partial void InsertSAC(SAC instance);
    partial void UpdateSAC(SAC instance);
    partial void DeleteSAC(SAC instance);
    partial void InsertTelefone(Telefone instance);
    partial void UpdateTelefone(Telefone instance);
    partial void DeleteTelefone(Telefone instance);
    partial void InsertTipo(Tipo instance);
    partial void UpdateTipo(Tipo instance);
    partial void DeleteTipo(Tipo instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    #endregion
		
		public SIDAFDataContext() : 
				base(global::SIDAF.DAL.Properties.Settings.Default.SIDAFConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SIDAFDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIDAFDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIDAFDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIDAFDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Caixa> Caixas
		{
			get
			{
				return this.GetTable<Caixa>();
			}
		}
		
		public System.Data.Linq.Table<Venda> Vendas
		{
			get
			{
				return this.GetTable<Venda>();
			}
		}
		
		public System.Data.Linq.Table<Cidade> Cidades
		{
			get
			{
				return this.GetTable<Cidade>();
			}
		}
		
		public System.Data.Linq.Table<Cliente> Clientes
		{
			get
			{
				return this.GetTable<Cliente>();
			}
		}
		
		public System.Data.Linq.Table<Compra> Compras
		{
			get
			{
				return this.GetTable<Compra>();
			}
		}
		
		public System.Data.Linq.Table<Descarte> Descartes
		{
			get
			{
				return this.GetTable<Descarte>();
			}
		}
		
		public System.Data.Linq.Table<Empresa> Empresas
		{
			get
			{
				return this.GetTable<Empresa>();
			}
		}
		
		public System.Data.Linq.Table<Endereco> Enderecos
		{
			get
			{
				return this.GetTable<Endereco>();
			}
		}
		
		public System.Data.Linq.Table<EnderecoPessoa> EnderecoPessoas
		{
			get
			{
				return this.GetTable<EnderecoPessoa>();
			}
		}
		
		public System.Data.Linq.Table<Especificacao> Especificacaos
		{
			get
			{
				return this.GetTable<Especificacao>();
			}
		}
		
		public System.Data.Linq.Table<EspecificacaoPedido> EspecificacaoPedidos
		{
			get
			{
				return this.GetTable<EspecificacaoPedido>();
			}
		}
		
		public System.Data.Linq.Table<estado> estados
		{
			get
			{
				return this.GetTable<estado>();
			}
		}
		
		public System.Data.Linq.Table<Estorno> Estornos
		{
			get
			{
				return this.GetTable<Estorno>();
			}
		}
		
		public System.Data.Linq.Table<Fornecedor> Fornecedors
		{
			get
			{
				return this.GetTable<Fornecedor>();
			}
		}
		
		public System.Data.Linq.Table<Funcionario> Funcionarios
		{
			get
			{
				return this.GetTable<Funcionario>();
			}
		}
		
		public System.Data.Linq.Table<Instituicao> Instituicaos
		{
			get
			{
				return this.GetTable<Instituicao>();
			}
		}
		
		public System.Data.Linq.Table<ItemDescarte> ItemDescartes
		{
			get
			{
				return this.GetTable<ItemDescarte>();
			}
		}
		
		public System.Data.Linq.Table<ItemEstoque> ItemEstoques
		{
			get
			{
				return this.GetTable<ItemEstoque>();
			}
		}
		
		public System.Data.Linq.Table<ItemEstorno> ItemEstornos
		{
			get
			{
				return this.GetTable<ItemEstorno>();
			}
		}
		
		public System.Data.Linq.Table<ItemNotaFiscal> ItemNotaFiscals
		{
			get
			{
				return this.GetTable<ItemNotaFiscal>();
			}
		}
		
		public System.Data.Linq.Table<ItemVenda> ItemVendas
		{
			get
			{
				return this.GetTable<ItemVenda>();
			}
		}
		
		public System.Data.Linq.Table<Licitacao> Licitacaos
		{
			get
			{
				return this.GetTable<Licitacao>();
			}
		}
		
		public System.Data.Linq.Table<Lote> Lotes
		{
			get
			{
				return this.GetTable<Lote>();
			}
		}
		
		public System.Data.Linq.Table<Movimentacao> Movimentacaos
		{
			get
			{
				return this.GetTable<Movimentacao>();
			}
		}
		
		public System.Data.Linq.Table<NotaFiscal> NotaFiscals
		{
			get
			{
				return this.GetTable<NotaFiscal>();
			}
		}
		
		public System.Data.Linq.Table<pai> pais
		{
			get
			{
				return this.GetTable<pai>();
			}
		}
		
		public System.Data.Linq.Table<Pedido> Pedidos
		{
			get
			{
				return this.GetTable<Pedido>();
			}
		}
		
		public System.Data.Linq.Table<Pessoa> Pessoas
		{
			get
			{
				return this.GetTable<Pessoa>();
			}
		}
		
		public System.Data.Linq.Table<Produto> Produtos
		{
			get
			{
				return this.GetTable<Produto>();
			}
		}
		
		public System.Data.Linq.Table<SAC> SACs
		{
			get
			{
				return this.GetTable<SAC>();
			}
		}
		
		public System.Data.Linq.Table<Telefone> Telefones
		{
			get
			{
				return this.GetTable<Telefone>();
			}
		}
		
		public System.Data.Linq.Table<TelefonePessoa> TelefonePessoas
		{
			get
			{
				return this.GetTable<TelefonePessoa>();
			}
		}
		
		public System.Data.Linq.Table<Tipo> Tipos
		{
			get
			{
				return this.GetTable<Tipo>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuarios
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
	}
	
	[Table(Name="dbo.Caixa")]
	public partial class Caixa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCaixa;
		
		private System.Nullable<System.DateTime> _dataAbertura;
		
		private System.Nullable<System.DateTime> _dataFechamento;
		
		private System.Nullable<int> _IDFuncionario;
		
		private EntitySet<Venda> _Vendas;
		
		private EntitySet<Estorno> _Estornos;
		
		private EntitySet<Movimentacao> _Movimentacaos;
		
		private EntityRef<Funcionario> _Funcionario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCaixaChanging(int value);
    partial void OnIDCaixaChanged();
    partial void OndataAberturaChanging(System.Nullable<System.DateTime> value);
    partial void OndataAberturaChanged();
    partial void OndataFechamentoChanging(System.Nullable<System.DateTime> value);
    partial void OndataFechamentoChanged();
    partial void OnIDFuncionarioChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioChanged();
    #endregion
		
		public Caixa()
		{
			this._Vendas = new EntitySet<Venda>(new Action<Venda>(this.attach_Vendas), new Action<Venda>(this.detach_Vendas));
			this._Estornos = new EntitySet<Estorno>(new Action<Estorno>(this.attach_Estornos), new Action<Estorno>(this.detach_Estornos));
			this._Movimentacaos = new EntitySet<Movimentacao>(new Action<Movimentacao>(this.attach_Movimentacaos), new Action<Movimentacao>(this.detach_Movimentacaos));
			this._Funcionario = default(EntityRef<Funcionario>);
			OnCreated();
		}
		
		[Column(Storage="_IDCaixa", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCaixa
		{
			get
			{
				return this._IDCaixa;
			}
			set
			{
				if ((this._IDCaixa != value))
				{
					this.OnIDCaixaChanging(value);
					this.SendPropertyChanging();
					this._IDCaixa = value;
					this.SendPropertyChanged("IDCaixa");
					this.OnIDCaixaChanged();
				}
			}
		}
		
		[Column(Storage="_dataAbertura", DbType="Date")]
		public System.Nullable<System.DateTime> dataAbertura
		{
			get
			{
				return this._dataAbertura;
			}
			set
			{
				if ((this._dataAbertura != value))
				{
					this.OndataAberturaChanging(value);
					this.SendPropertyChanging();
					this._dataAbertura = value;
					this.SendPropertyChanged("dataAbertura");
					this.OndataAberturaChanged();
				}
			}
		}
		
		[Column(Storage="_dataFechamento", DbType="Date")]
		public System.Nullable<System.DateTime> dataFechamento
		{
			get
			{
				return this._dataFechamento;
			}
			set
			{
				if ((this._dataFechamento != value))
				{
					this.OndataFechamentoChanging(value);
					this.SendPropertyChanging();
					this._dataFechamento = value;
					this.SendPropertyChanged("dataFechamento");
					this.OndataFechamentoChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionario", DbType="Int")]
		public System.Nullable<int> IDFuncionario
		{
			get
			{
				return this._IDFuncionario;
			}
			set
			{
				if ((this._IDFuncionario != value))
				{
					if (this._Funcionario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionario = value;
					this.SendPropertyChanged("IDFuncionario");
					this.OnIDFuncionarioChanged();
				}
			}
		}
		
		[Association(Name="Caixa_Venda", Storage="_Vendas", ThisKey="IDCaixa", OtherKey="IDCaixa")]
		public EntitySet<Venda> Vendas
		{
			get
			{
				return this._Vendas;
			}
			set
			{
				this._Vendas.Assign(value);
			}
		}
		
		[Association(Name="Caixa_Estorno", Storage="_Estornos", ThisKey="IDCaixa", OtherKey="IDCaixa")]
		public EntitySet<Estorno> Estornos
		{
			get
			{
				return this._Estornos;
			}
			set
			{
				this._Estornos.Assign(value);
			}
		}
		
		[Association(Name="Caixa_Movimentacao", Storage="_Movimentacaos", ThisKey="IDCaixa", OtherKey="IDCaixa")]
		public EntitySet<Movimentacao> Movimentacaos
		{
			get
			{
				return this._Movimentacaos;
			}
			set
			{
				this._Movimentacaos.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Caixa", Storage="_Funcionario", ThisKey="IDFuncionario", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.Caixas.Remove(this);
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.Caixas.Add(this);
						this._IDFuncionario = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vendas(Venda entity)
		{
			this.SendPropertyChanging();
			entity.Caixa = this;
		}
		
		private void detach_Vendas(Venda entity)
		{
			this.SendPropertyChanging();
			entity.Caixa = null;
		}
		
		private void attach_Estornos(Estorno entity)
		{
			this.SendPropertyChanging();
			entity.Caixa = this;
		}
		
		private void detach_Estornos(Estorno entity)
		{
			this.SendPropertyChanging();
			entity.Caixa = null;
		}
		
		private void attach_Movimentacaos(Movimentacao entity)
		{
			this.SendPropertyChanging();
			entity.Caixa = this;
		}
		
		private void detach_Movimentacaos(Movimentacao entity)
		{
			this.SendPropertyChanging();
			entity.Caixa = null;
		}
	}
	
	[Table(Name="dbo.Venda")]
	public partial class Venda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDVenda;
		
		private System.DateTime _dataVenda;
		
		private System.Nullable<int> _IDFuncionario;
		
		private System.Nullable<int> _IDCaixa;
		
		private System.Nullable<int> _IDCliente;
		
		private EntitySet<ItemEstorno> _ItemEstornos;
		
		private EntitySet<ItemVenda> _ItemVendas;
		
		private EntityRef<Caixa> _Caixa;
		
		private EntityRef<Funcionario> _Funcionario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDVendaChanging(int value);
    partial void OnIDVendaChanged();
    partial void OndataVendaChanging(System.DateTime value);
    partial void OndataVendaChanged();
    partial void OnIDFuncionarioChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioChanged();
    partial void OnIDCaixaChanging(System.Nullable<int> value);
    partial void OnIDCaixaChanged();
    partial void OnIDClienteChanging(System.Nullable<int> value);
    partial void OnIDClienteChanged();
    #endregion
		
		public Venda()
		{
			this._ItemEstornos = new EntitySet<ItemEstorno>(new Action<ItemEstorno>(this.attach_ItemEstornos), new Action<ItemEstorno>(this.detach_ItemEstornos));
			this._ItemVendas = new EntitySet<ItemVenda>(new Action<ItemVenda>(this.attach_ItemVendas), new Action<ItemVenda>(this.detach_ItemVendas));
			this._Caixa = default(EntityRef<Caixa>);
			this._Funcionario = default(EntityRef<Funcionario>);
			OnCreated();
		}
		
		[Column(Storage="_IDVenda", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDVenda
		{
			get
			{
				return this._IDVenda;
			}
			set
			{
				if ((this._IDVenda != value))
				{
					this.OnIDVendaChanging(value);
					this.SendPropertyChanging();
					this._IDVenda = value;
					this.SendPropertyChanged("IDVenda");
					this.OnIDVendaChanged();
				}
			}
		}
		
		[Column(Storage="_dataVenda", DbType="Date NOT NULL")]
		public System.DateTime dataVenda
		{
			get
			{
				return this._dataVenda;
			}
			set
			{
				if ((this._dataVenda != value))
				{
					this.OndataVendaChanging(value);
					this.SendPropertyChanging();
					this._dataVenda = value;
					this.SendPropertyChanged("dataVenda");
					this.OndataVendaChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionario", DbType="Int")]
		public System.Nullable<int> IDFuncionario
		{
			get
			{
				return this._IDFuncionario;
			}
			set
			{
				if ((this._IDFuncionario != value))
				{
					if (this._Funcionario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionario = value;
					this.SendPropertyChanged("IDFuncionario");
					this.OnIDFuncionarioChanged();
				}
			}
		}
		
		[Column(Storage="_IDCaixa", DbType="Int")]
		public System.Nullable<int> IDCaixa
		{
			get
			{
				return this._IDCaixa;
			}
			set
			{
				if ((this._IDCaixa != value))
				{
					if (this._Caixa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCaixaChanging(value);
					this.SendPropertyChanging();
					this._IDCaixa = value;
					this.SendPropertyChanged("IDCaixa");
					this.OnIDCaixaChanged();
				}
			}
		}
		
		[Column(Storage="_IDCliente", DbType="Int")]
		public System.Nullable<int> IDCliente
		{
			get
			{
				return this._IDCliente;
			}
			set
			{
				if ((this._IDCliente != value))
				{
					this.OnIDClienteChanging(value);
					this.SendPropertyChanging();
					this._IDCliente = value;
					this.SendPropertyChanged("IDCliente");
					this.OnIDClienteChanged();
				}
			}
		}
		
		[Association(Name="Venda_ItemEstorno", Storage="_ItemEstornos", ThisKey="IDVenda", OtherKey="IDVenda")]
		public EntitySet<ItemEstorno> ItemEstornos
		{
			get
			{
				return this._ItemEstornos;
			}
			set
			{
				this._ItemEstornos.Assign(value);
			}
		}
		
		[Association(Name="Venda_ItemVenda", Storage="_ItemVendas", ThisKey="IDVenda", OtherKey="IDVenda")]
		public EntitySet<ItemVenda> ItemVendas
		{
			get
			{
				return this._ItemVendas;
			}
			set
			{
				this._ItemVendas.Assign(value);
			}
		}
		
		[Association(Name="Caixa_Venda", Storage="_Caixa", ThisKey="IDCaixa", OtherKey="IDCaixa", IsForeignKey=true)]
		public Caixa Caixa
		{
			get
			{
				return this._Caixa.Entity;
			}
			set
			{
				Caixa previousValue = this._Caixa.Entity;
				if (((previousValue != value) 
							|| (this._Caixa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Caixa.Entity = null;
						previousValue.Vendas.Remove(this);
					}
					this._Caixa.Entity = value;
					if ((value != null))
					{
						value.Vendas.Add(this);
						this._IDCaixa = value.IDCaixa;
					}
					else
					{
						this._IDCaixa = default(Nullable<int>);
					}
					this.SendPropertyChanged("Caixa");
				}
			}
		}
		
		[Association(Name="Funcionario_Venda", Storage="_Funcionario", ThisKey="IDFuncionario", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.Vendas.Remove(this);
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.Vendas.Add(this);
						this._IDFuncionario = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemEstornos(ItemEstorno entity)
		{
			this.SendPropertyChanging();
			entity.Venda = this;
		}
		
		private void detach_ItemEstornos(ItemEstorno entity)
		{
			this.SendPropertyChanging();
			entity.Venda = null;
		}
		
		private void attach_ItemVendas(ItemVenda entity)
		{
			this.SendPropertyChanging();
			entity.Venda = this;
		}
		
		private void detach_ItemVendas(ItemVenda entity)
		{
			this.SendPropertyChanging();
			entity.Venda = null;
		}
	}
	
	[Table(Name="dbo.Cidade")]
	public partial class Cidade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCidade;
		
		private short _IDEstado;
		
		private string _Cidade1;
		
		private EntitySet<Endereco> _Enderecos;
		
		private EntityRef<estado> _estado;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCidadeChanging(int value);
    partial void OnIDCidadeChanged();
    partial void OnIDEstadoChanging(short value);
    partial void OnIDEstadoChanged();
    partial void OnCidade1Changing(string value);
    partial void OnCidade1Changed();
    #endregion
		
		public Cidade()
		{
			this._Enderecos = new EntitySet<Endereco>(new Action<Endereco>(this.attach_Enderecos), new Action<Endereco>(this.detach_Enderecos));
			this._estado = default(EntityRef<estado>);
			OnCreated();
		}
		
		[Column(Storage="_IDCidade", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCidade
		{
			get
			{
				return this._IDCidade;
			}
			set
			{
				if ((this._IDCidade != value))
				{
					this.OnIDCidadeChanging(value);
					this.SendPropertyChanging();
					this._IDCidade = value;
					this.SendPropertyChanged("IDCidade");
					this.OnIDCidadeChanged();
				}
			}
		}
		
		[Column(Storage="_IDEstado", DbType="SmallInt NOT NULL")]
		public short IDEstado
		{
			get
			{
				return this._IDEstado;
			}
			set
			{
				if ((this._IDEstado != value))
				{
					if (this._estado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEstadoChanging(value);
					this.SendPropertyChanging();
					this._IDEstado = value;
					this.SendPropertyChanged("IDEstado");
					this.OnIDEstadoChanged();
				}
			}
		}
		
		[Column(Name="Cidade", Storage="_Cidade1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Cidade1
		{
			get
			{
				return this._Cidade1;
			}
			set
			{
				if ((this._Cidade1 != value))
				{
					this.OnCidade1Changing(value);
					this.SendPropertyChanging();
					this._Cidade1 = value;
					this.SendPropertyChanged("Cidade1");
					this.OnCidade1Changed();
				}
			}
		}
		
		[Association(Name="Cidade_Endereco", Storage="_Enderecos", ThisKey="IDCidade", OtherKey="IDCidade")]
		public EntitySet<Endereco> Enderecos
		{
			get
			{
				return this._Enderecos;
			}
			set
			{
				this._Enderecos.Assign(value);
			}
		}
		
		[Association(Name="estado_Cidade", Storage="_estado", ThisKey="IDEstado", OtherKey="IDEstado", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public estado estado
		{
			get
			{
				return this._estado.Entity;
			}
			set
			{
				estado previousValue = this._estado.Entity;
				if (((previousValue != value) 
							|| (this._estado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._estado.Entity = null;
						previousValue.Cidades.Remove(this);
					}
					this._estado.Entity = value;
					if ((value != null))
					{
						value.Cidades.Add(this);
						this._IDEstado = value.IDEstado;
					}
					else
					{
						this._IDEstado = default(short);
					}
					this.SendPropertyChanged("estado");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enderecos(Endereco entity)
		{
			this.SendPropertyChanging();
			entity.Cidade = this;
		}
		
		private void detach_Enderecos(Endereco entity)
		{
			this.SendPropertyChanging();
			entity.Cidade = null;
		}
	}
	
	[Table(Name="dbo.Cliente")]
	public partial class Cliente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCliente;
		
		private string _cpf;
		
		private System.Nullable<int> _rg;
		
		private string _orgaoEmissorRg;
		
		private string _naturalidade;
		
		private string _nacionalidade;
		
		private System.Nullable<System.DateTime> _dataCadastro;
		
		private System.Nullable<int> _IDUsuario;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDClienteChanging(int value);
    partial void OnIDClienteChanged();
    partial void OncpfChanging(string value);
    partial void OncpfChanged();
    partial void OnrgChanging(System.Nullable<int> value);
    partial void OnrgChanged();
    partial void OnorgaoEmissorRgChanging(string value);
    partial void OnorgaoEmissorRgChanged();
    partial void OnnaturalidadeChanging(string value);
    partial void OnnaturalidadeChanged();
    partial void OnnacionalidadeChanging(string value);
    partial void OnnacionalidadeChanged();
    partial void OndataCadastroChanging(System.Nullable<System.DateTime> value);
    partial void OndataCadastroChanged();
    partial void OnIDUsuarioChanging(System.Nullable<int> value);
    partial void OnIDUsuarioChanged();
    #endregion
		
		public Cliente()
		{
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_IDCliente", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCliente
		{
			get
			{
				return this._IDCliente;
			}
			set
			{
				if ((this._IDCliente != value))
				{
					this.OnIDClienteChanging(value);
					this.SendPropertyChanging();
					this._IDCliente = value;
					this.SendPropertyChanged("IDCliente");
					this.OnIDClienteChanged();
				}
			}
		}
		
		[Column(Storage="_cpf", DbType="Char(11)")]
		public string cpf
		{
			get
			{
				return this._cpf;
			}
			set
			{
				if ((this._cpf != value))
				{
					this.OncpfChanging(value);
					this.SendPropertyChanging();
					this._cpf = value;
					this.SendPropertyChanged("cpf");
					this.OncpfChanged();
				}
			}
		}
		
		[Column(Storage="_rg", DbType="Int")]
		public System.Nullable<int> rg
		{
			get
			{
				return this._rg;
			}
			set
			{
				if ((this._rg != value))
				{
					this.OnrgChanging(value);
					this.SendPropertyChanging();
					this._rg = value;
					this.SendPropertyChanged("rg");
					this.OnrgChanged();
				}
			}
		}
		
		[Column(Storage="_orgaoEmissorRg", DbType="VarChar(50)")]
		public string orgaoEmissorRg
		{
			get
			{
				return this._orgaoEmissorRg;
			}
			set
			{
				if ((this._orgaoEmissorRg != value))
				{
					this.OnorgaoEmissorRgChanging(value);
					this.SendPropertyChanging();
					this._orgaoEmissorRg = value;
					this.SendPropertyChanged("orgaoEmissorRg");
					this.OnorgaoEmissorRgChanged();
				}
			}
		}
		
		[Column(Storage="_naturalidade", DbType="VarChar(50)")]
		public string naturalidade
		{
			get
			{
				return this._naturalidade;
			}
			set
			{
				if ((this._naturalidade != value))
				{
					this.OnnaturalidadeChanging(value);
					this.SendPropertyChanging();
					this._naturalidade = value;
					this.SendPropertyChanged("naturalidade");
					this.OnnaturalidadeChanged();
				}
			}
		}
		
		[Column(Storage="_nacionalidade", DbType="VarChar(50)")]
		public string nacionalidade
		{
			get
			{
				return this._nacionalidade;
			}
			set
			{
				if ((this._nacionalidade != value))
				{
					this.OnnacionalidadeChanging(value);
					this.SendPropertyChanging();
					this._nacionalidade = value;
					this.SendPropertyChanged("nacionalidade");
					this.OnnacionalidadeChanged();
				}
			}
		}
		
		[Column(Storage="_dataCadastro", DbType="Date")]
		public System.Nullable<System.DateTime> dataCadastro
		{
			get
			{
				return this._dataCadastro;
			}
			set
			{
				if ((this._dataCadastro != value))
				{
					this.OndataCadastroChanging(value);
					this.SendPropertyChanging();
					this._dataCadastro = value;
					this.SendPropertyChanged("dataCadastro");
					this.OndataCadastroChanged();
				}
			}
		}
		
		[Column(Storage="_IDUsuario", DbType="Int")]
		public System.Nullable<int> IDUsuario
		{
			get
			{
				return this._IDUsuario;
			}
			set
			{
				if ((this._IDUsuario != value))
				{
					this.OnIDUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IDUsuario = value;
					this.SendPropertyChanged("IDUsuario");
					this.OnIDUsuarioChanged();
				}
			}
		}
		
		[Association(Name="Cliente_Usuario", Storage="_Usuario", ThisKey="IDCliente", OtherKey="IDLogin", IsUnique=true, IsForeignKey=false)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Cliente = null;
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Cliente = this;
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Compra")]
	public partial class Compra : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCompra;
		
		private System.Nullable<System.DateTime> _dataCompra;
		
		private System.Nullable<int> _IDFuncionario;
		
		private System.Nullable<int> _IDLicitacao;
		
		private EntitySet<Lote> _Lotes;
		
		private EntityRef<Funcionario> _Funcionario;
		
		private EntityRef<Licitacao> _Licitacao;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCompraChanging(int value);
    partial void OnIDCompraChanged();
    partial void OndataCompraChanging(System.Nullable<System.DateTime> value);
    partial void OndataCompraChanged();
    partial void OnIDFuncionarioChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioChanged();
    partial void OnIDLicitacaoChanging(System.Nullable<int> value);
    partial void OnIDLicitacaoChanged();
    #endregion
		
		public Compra()
		{
			this._Lotes = new EntitySet<Lote>(new Action<Lote>(this.attach_Lotes), new Action<Lote>(this.detach_Lotes));
			this._Funcionario = default(EntityRef<Funcionario>);
			this._Licitacao = default(EntityRef<Licitacao>);
			OnCreated();
		}
		
		[Column(Storage="_IDCompra", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCompra
		{
			get
			{
				return this._IDCompra;
			}
			set
			{
				if ((this._IDCompra != value))
				{
					this.OnIDCompraChanging(value);
					this.SendPropertyChanging();
					this._IDCompra = value;
					this.SendPropertyChanged("IDCompra");
					this.OnIDCompraChanged();
				}
			}
		}
		
		[Column(Storage="_dataCompra", DbType="Date")]
		public System.Nullable<System.DateTime> dataCompra
		{
			get
			{
				return this._dataCompra;
			}
			set
			{
				if ((this._dataCompra != value))
				{
					this.OndataCompraChanging(value);
					this.SendPropertyChanging();
					this._dataCompra = value;
					this.SendPropertyChanged("dataCompra");
					this.OndataCompraChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionario", DbType="Int")]
		public System.Nullable<int> IDFuncionario
		{
			get
			{
				return this._IDFuncionario;
			}
			set
			{
				if ((this._IDFuncionario != value))
				{
					if (this._Funcionario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionario = value;
					this.SendPropertyChanged("IDFuncionario");
					this.OnIDFuncionarioChanged();
				}
			}
		}
		
		[Column(Storage="_IDLicitacao", DbType="Int")]
		public System.Nullable<int> IDLicitacao
		{
			get
			{
				return this._IDLicitacao;
			}
			set
			{
				if ((this._IDLicitacao != value))
				{
					if (this._Licitacao.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLicitacaoChanging(value);
					this.SendPropertyChanging();
					this._IDLicitacao = value;
					this.SendPropertyChanged("IDLicitacao");
					this.OnIDLicitacaoChanged();
				}
			}
		}
		
		[Association(Name="Compra_Lote", Storage="_Lotes", ThisKey="IDCompra", OtherKey="IDCompra")]
		public EntitySet<Lote> Lotes
		{
			get
			{
				return this._Lotes;
			}
			set
			{
				this._Lotes.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Compra", Storage="_Funcionario", ThisKey="IDFuncionario", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.Compras.Remove(this);
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.Compras.Add(this);
						this._IDFuncionario = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		[Association(Name="Licitacao_Compra", Storage="_Licitacao", ThisKey="IDLicitacao", OtherKey="IDLicitacao", IsForeignKey=true)]
		public Licitacao Licitacao
		{
			get
			{
				return this._Licitacao.Entity;
			}
			set
			{
				Licitacao previousValue = this._Licitacao.Entity;
				if (((previousValue != value) 
							|| (this._Licitacao.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Licitacao.Entity = null;
						previousValue.Compras.Remove(this);
					}
					this._Licitacao.Entity = value;
					if ((value != null))
					{
						value.Compras.Add(this);
						this._IDLicitacao = value.IDLicitacao;
					}
					else
					{
						this._IDLicitacao = default(Nullable<int>);
					}
					this.SendPropertyChanged("Licitacao");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Compra = this;
		}
		
		private void detach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Compra = null;
		}
	}
	
	[Table(Name="dbo.Descarte")]
	public partial class Descarte : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDescarte;
		
		private System.Nullable<System.DateTime> _dataOrdem;
		
		private System.Nullable<System.DateTime> _dataDescarte;
		
		private System.Nullable<int> _IDFuncionarioOrdem;
		
		private System.Nullable<int> _IDFuncionarioDescarte;
		
		private System.Nullable<int> _IDDestino;
		
		private EntityRef<Funcionario> _Funcionario;
		
		private EntityRef<Funcionario> _Funcionario1;
		
		private EntityRef<Instituicao> _Instituicao;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDescarteChanging(int value);
    partial void OnIDDescarteChanged();
    partial void OndataOrdemChanging(System.Nullable<System.DateTime> value);
    partial void OndataOrdemChanged();
    partial void OndataDescarteChanging(System.Nullable<System.DateTime> value);
    partial void OndataDescarteChanged();
    partial void OnIDFuncionarioOrdemChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioOrdemChanged();
    partial void OnIDFuncionarioDescarteChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioDescarteChanged();
    partial void OnIDDestinoChanging(System.Nullable<int> value);
    partial void OnIDDestinoChanged();
    #endregion
		
		public Descarte()
		{
			this._Funcionario = default(EntityRef<Funcionario>);
			this._Funcionario1 = default(EntityRef<Funcionario>);
			this._Instituicao = default(EntityRef<Instituicao>);
			OnCreated();
		}
		
		[Column(Storage="_IDDescarte", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDDescarte
		{
			get
			{
				return this._IDDescarte;
			}
			set
			{
				if ((this._IDDescarte != value))
				{
					this.OnIDDescarteChanging(value);
					this.SendPropertyChanging();
					this._IDDescarte = value;
					this.SendPropertyChanged("IDDescarte");
					this.OnIDDescarteChanged();
				}
			}
		}
		
		[Column(Storage="_dataOrdem", DbType="Date")]
		public System.Nullable<System.DateTime> dataOrdem
		{
			get
			{
				return this._dataOrdem;
			}
			set
			{
				if ((this._dataOrdem != value))
				{
					this.OndataOrdemChanging(value);
					this.SendPropertyChanging();
					this._dataOrdem = value;
					this.SendPropertyChanged("dataOrdem");
					this.OndataOrdemChanged();
				}
			}
		}
		
		[Column(Storage="_dataDescarte", DbType="Date")]
		public System.Nullable<System.DateTime> dataDescarte
		{
			get
			{
				return this._dataDescarte;
			}
			set
			{
				if ((this._dataDescarte != value))
				{
					this.OndataDescarteChanging(value);
					this.SendPropertyChanging();
					this._dataDescarte = value;
					this.SendPropertyChanged("dataDescarte");
					this.OndataDescarteChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionarioOrdem", DbType="Int")]
		public System.Nullable<int> IDFuncionarioOrdem
		{
			get
			{
				return this._IDFuncionarioOrdem;
			}
			set
			{
				if ((this._IDFuncionarioOrdem != value))
				{
					if (this._Funcionario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioOrdemChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionarioOrdem = value;
					this.SendPropertyChanged("IDFuncionarioOrdem");
					this.OnIDFuncionarioOrdemChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionarioDescarte", DbType="Int")]
		public System.Nullable<int> IDFuncionarioDescarte
		{
			get
			{
				return this._IDFuncionarioDescarte;
			}
			set
			{
				if ((this._IDFuncionarioDescarte != value))
				{
					if (this._Funcionario1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioDescarteChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionarioDescarte = value;
					this.SendPropertyChanged("IDFuncionarioDescarte");
					this.OnIDFuncionarioDescarteChanged();
				}
			}
		}
		
		[Column(Storage="_IDDestino", DbType="Int")]
		public System.Nullable<int> IDDestino
		{
			get
			{
				return this._IDDestino;
			}
			set
			{
				if ((this._IDDestino != value))
				{
					if (this._Instituicao.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDestinoChanging(value);
					this.SendPropertyChanging();
					this._IDDestino = value;
					this.SendPropertyChanged("IDDestino");
					this.OnIDDestinoChanged();
				}
			}
		}
		
		[Association(Name="Funcionario_Descarte", Storage="_Funcionario", ThisKey="IDFuncionarioOrdem", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.Descartes.Remove(this);
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.Descartes.Add(this);
						this._IDFuncionarioOrdem = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionarioOrdem = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		[Association(Name="Funcionario_Descarte1", Storage="_Funcionario1", ThisKey="IDFuncionarioDescarte", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario1
		{
			get
			{
				return this._Funcionario1.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario1.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario1.Entity = null;
						previousValue.Descartes1.Remove(this);
					}
					this._Funcionario1.Entity = value;
					if ((value != null))
					{
						value.Descartes1.Add(this);
						this._IDFuncionarioDescarte = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionarioDescarte = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario1");
				}
			}
		}
		
		[Association(Name="Instituicao_Descarte", Storage="_Instituicao", ThisKey="IDDestino", OtherKey="IDInstituicao", IsForeignKey=true)]
		public Instituicao Instituicao
		{
			get
			{
				return this._Instituicao.Entity;
			}
			set
			{
				Instituicao previousValue = this._Instituicao.Entity;
				if (((previousValue != value) 
							|| (this._Instituicao.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instituicao.Entity = null;
						previousValue.Descartes.Remove(this);
					}
					this._Instituicao.Entity = value;
					if ((value != null))
					{
						value.Descartes.Add(this);
						this._IDDestino = value.IDInstituicao;
					}
					else
					{
						this._IDDestino = default(Nullable<int>);
					}
					this.SendPropertyChanged("Instituicao");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Empresa")]
	public partial class Empresa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDEmpresa;
		
		private string _razaoSocial;
		
		private string _cnpj;
		
		private System.Nullable<int> _ie;
		
		private System.Nullable<int> _im;
		
		private System.Nullable<System.DateTime> _dataCadastro;
		
		private string _tipoEmpresa;
		
		private EntitySet<Funcionario> _Funcionarios;
		
		private EntitySet<SAC> _SACs;
		
		private EntityRef<Pessoa> _Pessoa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEmpresaChanging(int value);
    partial void OnIDEmpresaChanged();
    partial void OnrazaoSocialChanging(string value);
    partial void OnrazaoSocialChanged();
    partial void OncnpjChanging(string value);
    partial void OncnpjChanged();
    partial void OnieChanging(System.Nullable<int> value);
    partial void OnieChanged();
    partial void OnimChanging(System.Nullable<int> value);
    partial void OnimChanged();
    partial void OndataCadastroChanging(System.Nullable<System.DateTime> value);
    partial void OndataCadastroChanged();
    partial void OntipoEmpresaChanging(string value);
    partial void OntipoEmpresaChanged();
    #endregion
		
		public Empresa()
		{
			this._Funcionarios = new EntitySet<Funcionario>(new Action<Funcionario>(this.attach_Funcionarios), new Action<Funcionario>(this.detach_Funcionarios));
			this._SACs = new EntitySet<SAC>(new Action<SAC>(this.attach_SACs), new Action<SAC>(this.detach_SACs));
			this._Pessoa = default(EntityRef<Pessoa>);
			OnCreated();
		}
		
		[Column(Storage="_IDEmpresa", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDEmpresa
		{
			get
			{
				return this._IDEmpresa;
			}
			set
			{
				if ((this._IDEmpresa != value))
				{
					if (this._Pessoa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEmpresaChanging(value);
					this.SendPropertyChanging();
					this._IDEmpresa = value;
					this.SendPropertyChanged("IDEmpresa");
					this.OnIDEmpresaChanged();
				}
			}
		}
		
		[Column(Storage="_razaoSocial", DbType="VarChar(250)")]
		public string razaoSocial
		{
			get
			{
				return this._razaoSocial;
			}
			set
			{
				if ((this._razaoSocial != value))
				{
					this.OnrazaoSocialChanging(value);
					this.SendPropertyChanging();
					this._razaoSocial = value;
					this.SendPropertyChanged("razaoSocial");
					this.OnrazaoSocialChanged();
				}
			}
		}
		
		[Column(Storage="_cnpj", DbType="Char(14) NOT NULL", CanBeNull=false)]
		public string cnpj
		{
			get
			{
				return this._cnpj;
			}
			set
			{
				if ((this._cnpj != value))
				{
					this.OncnpjChanging(value);
					this.SendPropertyChanging();
					this._cnpj = value;
					this.SendPropertyChanged("cnpj");
					this.OncnpjChanged();
				}
			}
		}
		
		[Column(Storage="_ie", DbType="Int")]
		public System.Nullable<int> ie
		{
			get
			{
				return this._ie;
			}
			set
			{
				if ((this._ie != value))
				{
					this.OnieChanging(value);
					this.SendPropertyChanging();
					this._ie = value;
					this.SendPropertyChanged("ie");
					this.OnieChanged();
				}
			}
		}
		
		[Column(Storage="_im", DbType="Int")]
		public System.Nullable<int> im
		{
			get
			{
				return this._im;
			}
			set
			{
				if ((this._im != value))
				{
					this.OnimChanging(value);
					this.SendPropertyChanging();
					this._im = value;
					this.SendPropertyChanged("im");
					this.OnimChanged();
				}
			}
		}
		
		[Column(Storage="_dataCadastro", DbType="Date")]
		public System.Nullable<System.DateTime> dataCadastro
		{
			get
			{
				return this._dataCadastro;
			}
			set
			{
				if ((this._dataCadastro != value))
				{
					this.OndataCadastroChanging(value);
					this.SendPropertyChanging();
					this._dataCadastro = value;
					this.SendPropertyChanged("dataCadastro");
					this.OndataCadastroChanged();
				}
			}
		}
		
		[Column(Storage="_tipoEmpresa", DbType="VarChar(10)")]
		public string tipoEmpresa
		{
			get
			{
				return this._tipoEmpresa;
			}
			set
			{
				if ((this._tipoEmpresa != value))
				{
					this.OntipoEmpresaChanging(value);
					this.SendPropertyChanging();
					this._tipoEmpresa = value;
					this.SendPropertyChanged("tipoEmpresa");
					this.OntipoEmpresaChanged();
				}
			}
		}
		
		[Association(Name="Empresa_Funcionario", Storage="_Funcionarios", ThisKey="IDEmpresa", OtherKey="IDEmpresa")]
		public EntitySet<Funcionario> Funcionarios
		{
			get
			{
				return this._Funcionarios;
			}
			set
			{
				this._Funcionarios.Assign(value);
			}
		}
		
		[Association(Name="Empresa_SAC", Storage="_SACs", ThisKey="IDEmpresa", OtherKey="IDEmpresa")]
		public EntitySet<SAC> SACs
		{
			get
			{
				return this._SACs;
			}
			set
			{
				this._SACs.Assign(value);
			}
		}
		
		[Association(Name="Pessoa_Empresa", Storage="_Pessoa", ThisKey="IDEmpresa", OtherKey="IDPessoa", IsForeignKey=true)]
		public Pessoa Pessoa
		{
			get
			{
				return this._Pessoa.Entity;
			}
			set
			{
				Pessoa previousValue = this._Pessoa.Entity;
				if (((previousValue != value) 
							|| (this._Pessoa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pessoa.Entity = null;
						previousValue.Empresa = null;
					}
					this._Pessoa.Entity = value;
					if ((value != null))
					{
						value.Empresa = this;
						this._IDEmpresa = value.IDPessoa;
					}
					else
					{
						this._IDEmpresa = default(int);
					}
					this.SendPropertyChanged("Pessoa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Funcionarios(Funcionario entity)
		{
			this.SendPropertyChanging();
			entity.Empresa = this;
		}
		
		private void detach_Funcionarios(Funcionario entity)
		{
			this.SendPropertyChanging();
			entity.Empresa = null;
		}
		
		private void attach_SACs(SAC entity)
		{
			this.SendPropertyChanging();
			entity.Empresa = this;
		}
		
		private void detach_SACs(SAC entity)
		{
			this.SendPropertyChanging();
			entity.Empresa = null;
		}
	}
	
	[Table(Name="dbo.Endereco")]
	public partial class Endereco : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDEndereco;
		
		private string _logradouro;
		
		private string _numero;
		
		private string _complemento;
		
		private System.Nullable<int> _cep;
		
		private System.Nullable<int> _IDCidade;
		
		private string _bairro;
		
		private EntityRef<Cidade> _Cidade;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEnderecoChanging(int value);
    partial void OnIDEnderecoChanged();
    partial void OnlogradouroChanging(string value);
    partial void OnlogradouroChanged();
    partial void OnnumeroChanging(string value);
    partial void OnnumeroChanged();
    partial void OncomplementoChanging(string value);
    partial void OncomplementoChanged();
    partial void OncepChanging(System.Nullable<int> value);
    partial void OncepChanged();
    partial void OnIDCidadeChanging(System.Nullable<int> value);
    partial void OnIDCidadeChanged();
    partial void OnbairroChanging(string value);
    partial void OnbairroChanged();
    #endregion
		
		public Endereco()
		{
			this._Cidade = default(EntityRef<Cidade>);
			OnCreated();
		}
		
		[Column(Storage="_IDEndereco", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDEndereco
		{
			get
			{
				return this._IDEndereco;
			}
			set
			{
				if ((this._IDEndereco != value))
				{
					this.OnIDEnderecoChanging(value);
					this.SendPropertyChanging();
					this._IDEndereco = value;
					this.SendPropertyChanged("IDEndereco");
					this.OnIDEnderecoChanged();
				}
			}
		}
		
		[Column(Storage="_logradouro", DbType="VarChar(150)")]
		public string logradouro
		{
			get
			{
				return this._logradouro;
			}
			set
			{
				if ((this._logradouro != value))
				{
					this.OnlogradouroChanging(value);
					this.SendPropertyChanging();
					this._logradouro = value;
					this.SendPropertyChanged("logradouro");
					this.OnlogradouroChanged();
				}
			}
		}
		
		[Column(Storage="_numero", DbType="VarChar(10)")]
		public string numero
		{
			get
			{
				return this._numero;
			}
			set
			{
				if ((this._numero != value))
				{
					this.OnnumeroChanging(value);
					this.SendPropertyChanging();
					this._numero = value;
					this.SendPropertyChanged("numero");
					this.OnnumeroChanged();
				}
			}
		}
		
		[Column(Storage="_complemento", DbType="VarChar(10)")]
		public string complemento
		{
			get
			{
				return this._complemento;
			}
			set
			{
				if ((this._complemento != value))
				{
					this.OncomplementoChanging(value);
					this.SendPropertyChanging();
					this._complemento = value;
					this.SendPropertyChanged("complemento");
					this.OncomplementoChanged();
				}
			}
		}
		
		[Column(Storage="_cep", DbType="Int")]
		public System.Nullable<int> cep
		{
			get
			{
				return this._cep;
			}
			set
			{
				if ((this._cep != value))
				{
					this.OncepChanging(value);
					this.SendPropertyChanging();
					this._cep = value;
					this.SendPropertyChanged("cep");
					this.OncepChanged();
				}
			}
		}
		
		[Column(Storage="_IDCidade", DbType="Int")]
		public System.Nullable<int> IDCidade
		{
			get
			{
				return this._IDCidade;
			}
			set
			{
				if ((this._IDCidade != value))
				{
					if (this._Cidade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCidadeChanging(value);
					this.SendPropertyChanging();
					this._IDCidade = value;
					this.SendPropertyChanged("IDCidade");
					this.OnIDCidadeChanged();
				}
			}
		}
		
		[Column(Storage="_bairro", DbType="VarChar(100)")]
		public string bairro
		{
			get
			{
				return this._bairro;
			}
			set
			{
				if ((this._bairro != value))
				{
					this.OnbairroChanging(value);
					this.SendPropertyChanging();
					this._bairro = value;
					this.SendPropertyChanged("bairro");
					this.OnbairroChanged();
				}
			}
		}
		
		[Association(Name="Cidade_Endereco", Storage="_Cidade", ThisKey="IDCidade", OtherKey="IDCidade", IsForeignKey=true)]
		public Cidade Cidade
		{
			get
			{
				return this._Cidade.Entity;
			}
			set
			{
				Cidade previousValue = this._Cidade.Entity;
				if (((previousValue != value) 
							|| (this._Cidade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cidade.Entity = null;
						previousValue.Enderecos.Remove(this);
					}
					this._Cidade.Entity = value;
					if ((value != null))
					{
						value.Enderecos.Add(this);
						this._IDCidade = value.IDCidade;
					}
					else
					{
						this._IDCidade = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cidade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EnderecoPessoa")]
	public partial class EnderecoPessoa
	{
		
		private System.Nullable<int> _IDPessoa;
		
		private System.Nullable<int> _IDEndereco;
		
		public EnderecoPessoa()
		{
		}
		
		[Column(Storage="_IDPessoa", DbType="Int")]
		public System.Nullable<int> IDPessoa
		{
			get
			{
				return this._IDPessoa;
			}
			set
			{
				if ((this._IDPessoa != value))
				{
					this._IDPessoa = value;
				}
			}
		}
		
		[Column(Storage="_IDEndereco", DbType="Int")]
		public System.Nullable<int> IDEndereco
		{
			get
			{
				return this._IDEndereco;
			}
			set
			{
				if ((this._IDEndereco != value))
				{
					this._IDEndereco = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Especificacao")]
	public partial class Especificacao : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDEspecificacao;
		
		private string _descricao;
		
		private EntitySet<EspecificacaoPedido> _EspecificacaoPedidos;
		
		private EntitySet<Lote> _Lotes;
		
		private EntitySet<Produto> _Produtos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEspecificacaoChanging(int value);
    partial void OnIDEspecificacaoChanged();
    partial void OndescricaoChanging(string value);
    partial void OndescricaoChanged();
    #endregion
		
		public Especificacao()
		{
			this._EspecificacaoPedidos = new EntitySet<EspecificacaoPedido>(new Action<EspecificacaoPedido>(this.attach_EspecificacaoPedidos), new Action<EspecificacaoPedido>(this.detach_EspecificacaoPedidos));
			this._Lotes = new EntitySet<Lote>(new Action<Lote>(this.attach_Lotes), new Action<Lote>(this.detach_Lotes));
			this._Produtos = new EntitySet<Produto>(new Action<Produto>(this.attach_Produtos), new Action<Produto>(this.detach_Produtos));
			OnCreated();
		}
		
		[Column(Storage="_IDEspecificacao", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDEspecificacao
		{
			get
			{
				return this._IDEspecificacao;
			}
			set
			{
				if ((this._IDEspecificacao != value))
				{
					this.OnIDEspecificacaoChanging(value);
					this.SendPropertyChanging();
					this._IDEspecificacao = value;
					this.SendPropertyChanged("IDEspecificacao");
					this.OnIDEspecificacaoChanged();
				}
			}
		}
		
		[Column(Storage="_descricao", DbType="VarChar(150)")]
		public string descricao
		{
			get
			{
				return this._descricao;
			}
			set
			{
				if ((this._descricao != value))
				{
					this.OndescricaoChanging(value);
					this.SendPropertyChanging();
					this._descricao = value;
					this.SendPropertyChanged("descricao");
					this.OndescricaoChanged();
				}
			}
		}
		
		[Association(Name="Especificacao_EspecificacaoPedido", Storage="_EspecificacaoPedidos", ThisKey="IDEspecificacao", OtherKey="IDEspecificacao")]
		public EntitySet<EspecificacaoPedido> EspecificacaoPedidos
		{
			get
			{
				return this._EspecificacaoPedidos;
			}
			set
			{
				this._EspecificacaoPedidos.Assign(value);
			}
		}
		
		[Association(Name="Especificacao_Lote", Storage="_Lotes", ThisKey="IDEspecificacao", OtherKey="IDEspecificacao")]
		public EntitySet<Lote> Lotes
		{
			get
			{
				return this._Lotes;
			}
			set
			{
				this._Lotes.Assign(value);
			}
		}
		
		[Association(Name="Especificacao_Produto", Storage="_Produtos", ThisKey="IDEspecificacao", OtherKey="IDEspecificacao")]
		public EntitySet<Produto> Produtos
		{
			get
			{
				return this._Produtos;
			}
			set
			{
				this._Produtos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EspecificacaoPedidos(EspecificacaoPedido entity)
		{
			this.SendPropertyChanging();
			entity.Especificacao = this;
		}
		
		private void detach_EspecificacaoPedidos(EspecificacaoPedido entity)
		{
			this.SendPropertyChanging();
			entity.Especificacao = null;
		}
		
		private void attach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Especificacao = this;
		}
		
		private void detach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Especificacao = null;
		}
		
		private void attach_Produtos(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Especificacao = this;
		}
		
		private void detach_Produtos(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Especificacao = null;
		}
	}
	
	[Table(Name="dbo.EspecificacaoPedido")]
	public partial class EspecificacaoPedido : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDEspecificacaoPedido;
		
		private System.Nullable<int> _IDPedido;
		
		private System.Nullable<int> _IDEspecificacao;
		
		private EntityRef<Especificacao> _Especificacao;
		
		private EntityRef<Pedido> _Pedido;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEspecificacaoPedidoChanging(int value);
    partial void OnIDEspecificacaoPedidoChanged();
    partial void OnIDPedidoChanging(System.Nullable<int> value);
    partial void OnIDPedidoChanged();
    partial void OnIDEspecificacaoChanging(System.Nullable<int> value);
    partial void OnIDEspecificacaoChanged();
    #endregion
		
		public EspecificacaoPedido()
		{
			this._Especificacao = default(EntityRef<Especificacao>);
			this._Pedido = default(EntityRef<Pedido>);
			OnCreated();
		}
		
		[Column(Storage="_IDEspecificacaoPedido", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDEspecificacaoPedido
		{
			get
			{
				return this._IDEspecificacaoPedido;
			}
			set
			{
				if ((this._IDEspecificacaoPedido != value))
				{
					this.OnIDEspecificacaoPedidoChanging(value);
					this.SendPropertyChanging();
					this._IDEspecificacaoPedido = value;
					this.SendPropertyChanged("IDEspecificacaoPedido");
					this.OnIDEspecificacaoPedidoChanged();
				}
			}
		}
		
		[Column(Storage="_IDPedido", DbType="Int")]
		public System.Nullable<int> IDPedido
		{
			get
			{
				return this._IDPedido;
			}
			set
			{
				if ((this._IDPedido != value))
				{
					if (this._Pedido.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPedidoChanging(value);
					this.SendPropertyChanging();
					this._IDPedido = value;
					this.SendPropertyChanged("IDPedido");
					this.OnIDPedidoChanged();
				}
			}
		}
		
		[Column(Storage="_IDEspecificacao", DbType="Int")]
		public System.Nullable<int> IDEspecificacao
		{
			get
			{
				return this._IDEspecificacao;
			}
			set
			{
				if ((this._IDEspecificacao != value))
				{
					if (this._Especificacao.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEspecificacaoChanging(value);
					this.SendPropertyChanging();
					this._IDEspecificacao = value;
					this.SendPropertyChanged("IDEspecificacao");
					this.OnIDEspecificacaoChanged();
				}
			}
		}
		
		[Association(Name="Especificacao_EspecificacaoPedido", Storage="_Especificacao", ThisKey="IDEspecificacao", OtherKey="IDEspecificacao", IsForeignKey=true)]
		public Especificacao Especificacao
		{
			get
			{
				return this._Especificacao.Entity;
			}
			set
			{
				Especificacao previousValue = this._Especificacao.Entity;
				if (((previousValue != value) 
							|| (this._Especificacao.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especificacao.Entity = null;
						previousValue.EspecificacaoPedidos.Remove(this);
					}
					this._Especificacao.Entity = value;
					if ((value != null))
					{
						value.EspecificacaoPedidos.Add(this);
						this._IDEspecificacao = value.IDEspecificacao;
					}
					else
					{
						this._IDEspecificacao = default(Nullable<int>);
					}
					this.SendPropertyChanged("Especificacao");
				}
			}
		}
		
		[Association(Name="Pedido_EspecificacaoPedido", Storage="_Pedido", ThisKey="IDPedido", OtherKey="IDPedido", IsForeignKey=true)]
		public Pedido Pedido
		{
			get
			{
				return this._Pedido.Entity;
			}
			set
			{
				Pedido previousValue = this._Pedido.Entity;
				if (((previousValue != value) 
							|| (this._Pedido.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pedido.Entity = null;
						previousValue.EspecificacaoPedidos.Remove(this);
					}
					this._Pedido.Entity = value;
					if ((value != null))
					{
						value.EspecificacaoPedidos.Add(this);
						this._IDPedido = value.IDPedido;
					}
					else
					{
						this._IDPedido = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pedido");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.estado")]
	public partial class estado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _IDEstado;
		
		private short _IDPais;
		
		private string _Sigla;
		
		private string _Estado1;
		
		private EntitySet<Cidade> _Cidades;
		
		private EntityRef<pai> _pai;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEstadoChanging(short value);
    partial void OnIDEstadoChanged();
    partial void OnIDPaisChanging(short value);
    partial void OnIDPaisChanged();
    partial void OnSiglaChanging(string value);
    partial void OnSiglaChanged();
    partial void OnEstado1Changing(string value);
    partial void OnEstado1Changed();
    #endregion
		
		public estado()
		{
			this._Cidades = new EntitySet<Cidade>(new Action<Cidade>(this.attach_Cidades), new Action<Cidade>(this.detach_Cidades));
			this._pai = default(EntityRef<pai>);
			OnCreated();
		}
		
		[Column(Storage="_IDEstado", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short IDEstado
		{
			get
			{
				return this._IDEstado;
			}
			set
			{
				if ((this._IDEstado != value))
				{
					this.OnIDEstadoChanging(value);
					this.SendPropertyChanging();
					this._IDEstado = value;
					this.SendPropertyChanged("IDEstado");
					this.OnIDEstadoChanged();
				}
			}
		}
		
		[Column(Storage="_IDPais", DbType="SmallInt NOT NULL")]
		public short IDPais
		{
			get
			{
				return this._IDPais;
			}
			set
			{
				if ((this._IDPais != value))
				{
					if (this._pai.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPaisChanging(value);
					this.SendPropertyChanging();
					this._IDPais = value;
					this.SendPropertyChanged("IDPais");
					this.OnIDPaisChanged();
				}
			}
		}
		
		[Column(Storage="_Sigla", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Sigla
		{
			get
			{
				return this._Sigla;
			}
			set
			{
				if ((this._Sigla != value))
				{
					this.OnSiglaChanging(value);
					this.SendPropertyChanging();
					this._Sigla = value;
					this.SendPropertyChanged("Sigla");
					this.OnSiglaChanged();
				}
			}
		}
		
		[Column(Name="Estado", Storage="_Estado1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Estado1
		{
			get
			{
				return this._Estado1;
			}
			set
			{
				if ((this._Estado1 != value))
				{
					this.OnEstado1Changing(value);
					this.SendPropertyChanging();
					this._Estado1 = value;
					this.SendPropertyChanged("Estado1");
					this.OnEstado1Changed();
				}
			}
		}
		
		[Association(Name="estado_Cidade", Storage="_Cidades", ThisKey="IDEstado", OtherKey="IDEstado")]
		public EntitySet<Cidade> Cidades
		{
			get
			{
				return this._Cidades;
			}
			set
			{
				this._Cidades.Assign(value);
			}
		}
		
		[Association(Name="pai_estado", Storage="_pai", ThisKey="IDPais", OtherKey="IDPais", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public pai pai
		{
			get
			{
				return this._pai.Entity;
			}
			set
			{
				pai previousValue = this._pai.Entity;
				if (((previousValue != value) 
							|| (this._pai.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pai.Entity = null;
						previousValue.estados.Remove(this);
					}
					this._pai.Entity = value;
					if ((value != null))
					{
						value.estados.Add(this);
						this._IDPais = value.IDPais;
					}
					else
					{
						this._IDPais = default(short);
					}
					this.SendPropertyChanged("pai");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cidades(Cidade entity)
		{
			this.SendPropertyChanging();
			entity.estado = this;
		}
		
		private void detach_Cidades(Cidade entity)
		{
			this.SendPropertyChanging();
			entity.estado = null;
		}
	}
	
	[Table(Name="dbo.Estorno")]
	public partial class Estorno : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDEstorno;
		
		private string _dataEstorno;
		
		private System.Nullable<int> _IDFuncionario;
		
		private System.Nullable<int> _IDCaixa;
		
		private System.Nullable<int> _IDCliente;
		
		private EntitySet<ItemEstorno> _ItemEstornos;
		
		private EntityRef<Caixa> _Caixa;
		
		private EntityRef<Funcionario> _Funcionario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEstornoChanging(int value);
    partial void OnIDEstornoChanged();
    partial void OndataEstornoChanging(string value);
    partial void OndataEstornoChanged();
    partial void OnIDFuncionarioChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioChanged();
    partial void OnIDCaixaChanging(System.Nullable<int> value);
    partial void OnIDCaixaChanged();
    partial void OnIDClienteChanging(System.Nullable<int> value);
    partial void OnIDClienteChanged();
    #endregion
		
		public Estorno()
		{
			this._ItemEstornos = new EntitySet<ItemEstorno>(new Action<ItemEstorno>(this.attach_ItemEstornos), new Action<ItemEstorno>(this.detach_ItemEstornos));
			this._Caixa = default(EntityRef<Caixa>);
			this._Funcionario = default(EntityRef<Funcionario>);
			OnCreated();
		}
		
		[Column(Storage="_IDEstorno", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDEstorno
		{
			get
			{
				return this._IDEstorno;
			}
			set
			{
				if ((this._IDEstorno != value))
				{
					this.OnIDEstornoChanging(value);
					this.SendPropertyChanging();
					this._IDEstorno = value;
					this.SendPropertyChanged("IDEstorno");
					this.OnIDEstornoChanged();
				}
			}
		}
		
		[Column(Storage="_dataEstorno", DbType="NChar(10)")]
		public string dataEstorno
		{
			get
			{
				return this._dataEstorno;
			}
			set
			{
				if ((this._dataEstorno != value))
				{
					this.OndataEstornoChanging(value);
					this.SendPropertyChanging();
					this._dataEstorno = value;
					this.SendPropertyChanged("dataEstorno");
					this.OndataEstornoChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionario", DbType="Int")]
		public System.Nullable<int> IDFuncionario
		{
			get
			{
				return this._IDFuncionario;
			}
			set
			{
				if ((this._IDFuncionario != value))
				{
					if (this._Funcionario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionario = value;
					this.SendPropertyChanged("IDFuncionario");
					this.OnIDFuncionarioChanged();
				}
			}
		}
		
		[Column(Storage="_IDCaixa", DbType="Int")]
		public System.Nullable<int> IDCaixa
		{
			get
			{
				return this._IDCaixa;
			}
			set
			{
				if ((this._IDCaixa != value))
				{
					if (this._Caixa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCaixaChanging(value);
					this.SendPropertyChanging();
					this._IDCaixa = value;
					this.SendPropertyChanged("IDCaixa");
					this.OnIDCaixaChanged();
				}
			}
		}
		
		[Column(Storage="_IDCliente", DbType="Int")]
		public System.Nullable<int> IDCliente
		{
			get
			{
				return this._IDCliente;
			}
			set
			{
				if ((this._IDCliente != value))
				{
					this.OnIDClienteChanging(value);
					this.SendPropertyChanging();
					this._IDCliente = value;
					this.SendPropertyChanged("IDCliente");
					this.OnIDClienteChanged();
				}
			}
		}
		
		[Association(Name="Estorno_ItemEstorno", Storage="_ItemEstornos", ThisKey="IDEstorno", OtherKey="IDEstorno")]
		public EntitySet<ItemEstorno> ItemEstornos
		{
			get
			{
				return this._ItemEstornos;
			}
			set
			{
				this._ItemEstornos.Assign(value);
			}
		}
		
		[Association(Name="Caixa_Estorno", Storage="_Caixa", ThisKey="IDCaixa", OtherKey="IDCaixa", IsForeignKey=true)]
		public Caixa Caixa
		{
			get
			{
				return this._Caixa.Entity;
			}
			set
			{
				Caixa previousValue = this._Caixa.Entity;
				if (((previousValue != value) 
							|| (this._Caixa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Caixa.Entity = null;
						previousValue.Estornos.Remove(this);
					}
					this._Caixa.Entity = value;
					if ((value != null))
					{
						value.Estornos.Add(this);
						this._IDCaixa = value.IDCaixa;
					}
					else
					{
						this._IDCaixa = default(Nullable<int>);
					}
					this.SendPropertyChanged("Caixa");
				}
			}
		}
		
		[Association(Name="Funcionario_Estorno", Storage="_Funcionario", ThisKey="IDFuncionario", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.Estornos.Remove(this);
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.Estornos.Add(this);
						this._IDFuncionario = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemEstornos(ItemEstorno entity)
		{
			this.SendPropertyChanging();
			entity.Estorno = this;
		}
		
		private void detach_ItemEstornos(ItemEstorno entity)
		{
			this.SendPropertyChanging();
			entity.Estorno = null;
		}
	}
	
	[Table(Name="dbo.Fornecedor")]
	public partial class Fornecedor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDFornecedor;
		
		private string _razaoSocial;
		
		private string _cnpj;
		
		private System.Nullable<int> _ie;
		
		private System.Nullable<int> _im;
		
		private System.Nullable<System.DateTime> _dataCadastro;
		
		private System.Nullable<System.DateTime> _dataUltimaAlteracao;
		
		private EntitySet<Lote> _Lotes;
		
		private EntityRef<Pessoa> _Pessoa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDFornecedorChanging(int value);
    partial void OnIDFornecedorChanged();
    partial void OnrazaoSocialChanging(string value);
    partial void OnrazaoSocialChanged();
    partial void OncnpjChanging(string value);
    partial void OncnpjChanged();
    partial void OnieChanging(System.Nullable<int> value);
    partial void OnieChanged();
    partial void OnimChanging(System.Nullable<int> value);
    partial void OnimChanged();
    partial void OndataCadastroChanging(System.Nullable<System.DateTime> value);
    partial void OndataCadastroChanged();
    partial void OndataUltimaAlteracaoChanging(System.Nullable<System.DateTime> value);
    partial void OndataUltimaAlteracaoChanged();
    #endregion
		
		public Fornecedor()
		{
			this._Lotes = new EntitySet<Lote>(new Action<Lote>(this.attach_Lotes), new Action<Lote>(this.detach_Lotes));
			this._Pessoa = default(EntityRef<Pessoa>);
			OnCreated();
		}
		
		[Column(Storage="_IDFornecedor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDFornecedor
		{
			get
			{
				return this._IDFornecedor;
			}
			set
			{
				if ((this._IDFornecedor != value))
				{
					this.OnIDFornecedorChanging(value);
					this.SendPropertyChanging();
					this._IDFornecedor = value;
					this.SendPropertyChanged("IDFornecedor");
					this.OnIDFornecedorChanged();
				}
			}
		}
		
		[Column(Storage="_razaoSocial", DbType="VarChar(250)")]
		public string razaoSocial
		{
			get
			{
				return this._razaoSocial;
			}
			set
			{
				if ((this._razaoSocial != value))
				{
					this.OnrazaoSocialChanging(value);
					this.SendPropertyChanging();
					this._razaoSocial = value;
					this.SendPropertyChanged("razaoSocial");
					this.OnrazaoSocialChanged();
				}
			}
		}
		
		[Column(Storage="_cnpj", DbType="Char(14)")]
		public string cnpj
		{
			get
			{
				return this._cnpj;
			}
			set
			{
				if ((this._cnpj != value))
				{
					this.OncnpjChanging(value);
					this.SendPropertyChanging();
					this._cnpj = value;
					this.SendPropertyChanged("cnpj");
					this.OncnpjChanged();
				}
			}
		}
		
		[Column(Storage="_ie", DbType="Int")]
		public System.Nullable<int> ie
		{
			get
			{
				return this._ie;
			}
			set
			{
				if ((this._ie != value))
				{
					this.OnieChanging(value);
					this.SendPropertyChanging();
					this._ie = value;
					this.SendPropertyChanged("ie");
					this.OnieChanged();
				}
			}
		}
		
		[Column(Storage="_im", DbType="Int")]
		public System.Nullable<int> im
		{
			get
			{
				return this._im;
			}
			set
			{
				if ((this._im != value))
				{
					this.OnimChanging(value);
					this.SendPropertyChanging();
					this._im = value;
					this.SendPropertyChanged("im");
					this.OnimChanged();
				}
			}
		}
		
		[Column(Storage="_dataCadastro", DbType="Date")]
		public System.Nullable<System.DateTime> dataCadastro
		{
			get
			{
				return this._dataCadastro;
			}
			set
			{
				if ((this._dataCadastro != value))
				{
					this.OndataCadastroChanging(value);
					this.SendPropertyChanging();
					this._dataCadastro = value;
					this.SendPropertyChanged("dataCadastro");
					this.OndataCadastroChanged();
				}
			}
		}
		
		[Column(Storage="_dataUltimaAlteracao", DbType="Date")]
		public System.Nullable<System.DateTime> dataUltimaAlteracao
		{
			get
			{
				return this._dataUltimaAlteracao;
			}
			set
			{
				if ((this._dataUltimaAlteracao != value))
				{
					this.OndataUltimaAlteracaoChanging(value);
					this.SendPropertyChanging();
					this._dataUltimaAlteracao = value;
					this.SendPropertyChanged("dataUltimaAlteracao");
					this.OndataUltimaAlteracaoChanged();
				}
			}
		}
		
		[Association(Name="Fornecedor_Lote", Storage="_Lotes", ThisKey="IDFornecedor", OtherKey="IDFornecedor")]
		public EntitySet<Lote> Lotes
		{
			get
			{
				return this._Lotes;
			}
			set
			{
				this._Lotes.Assign(value);
			}
		}
		
		[Association(Name="Fornecedor_Pessoa", Storage="_Pessoa", ThisKey="IDFornecedor", OtherKey="IDPessoa", IsUnique=true, IsForeignKey=false)]
		public Pessoa Pessoa
		{
			get
			{
				return this._Pessoa.Entity;
			}
			set
			{
				Pessoa previousValue = this._Pessoa.Entity;
				if (((previousValue != value) 
							|| (this._Pessoa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pessoa.Entity = null;
						previousValue.Fornecedor = null;
					}
					this._Pessoa.Entity = value;
					if ((value != null))
					{
						value.Fornecedor = this;
					}
					this.SendPropertyChanged("Pessoa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Fornecedor = this;
		}
		
		private void detach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Fornecedor = null;
		}
	}
	
	[Table(Name="dbo.Funcionario")]
	public partial class Funcionario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDFuncionario;
		
		private System.Nullable<int> _IDUsuario;
		
		private string _cpf;
		
		private System.Nullable<int> _rg;
		
		private System.Nullable<int> _orgaoEmissorRg;
		
		private string _naturalidade;
		
		private string _nacionalidade;
		
		private string _tipoFuncionario;
		
		private System.Nullable<int> _IDEmpresa;
		
		private System.Nullable<System.DateTime> _dataCadastro;
		
		private System.Nullable<bool> _isAtivo;
		
		private EntitySet<Caixa> _Caixas;
		
		private EntitySet<Venda> _Vendas;
		
		private EntitySet<Compra> _Compras;
		
		private EntitySet<Descarte> _Descartes;
		
		private EntitySet<Descarte> _Descartes1;
		
		private EntitySet<Estorno> _Estornos;
		
		private EntitySet<ItemDescarte> _ItemDescartes;
		
		private EntitySet<Movimentacao> _Movimentacaos;
		
		private EntitySet<NotaFiscal> _NotaFiscals;
		
		private EntityRef<Pessoa> _Pessoa;
		
		private EntityRef<Empresa> _Empresa;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDFuncionarioChanging(int value);
    partial void OnIDFuncionarioChanged();
    partial void OnIDUsuarioChanging(System.Nullable<int> value);
    partial void OnIDUsuarioChanged();
    partial void OncpfChanging(string value);
    partial void OncpfChanged();
    partial void OnrgChanging(System.Nullable<int> value);
    partial void OnrgChanged();
    partial void OnorgaoEmissorRgChanging(System.Nullable<int> value);
    partial void OnorgaoEmissorRgChanged();
    partial void OnnaturalidadeChanging(string value);
    partial void OnnaturalidadeChanged();
    partial void OnnacionalidadeChanging(string value);
    partial void OnnacionalidadeChanged();
    partial void OntipoFuncionarioChanging(string value);
    partial void OntipoFuncionarioChanged();
    partial void OnIDEmpresaChanging(System.Nullable<int> value);
    partial void OnIDEmpresaChanged();
    partial void OndataCadastroChanging(System.Nullable<System.DateTime> value);
    partial void OndataCadastroChanged();
    partial void OnisAtivoChanging(System.Nullable<bool> value);
    partial void OnisAtivoChanged();
    #endregion
		
		public Funcionario()
		{
			this._Caixas = new EntitySet<Caixa>(new Action<Caixa>(this.attach_Caixas), new Action<Caixa>(this.detach_Caixas));
			this._Vendas = new EntitySet<Venda>(new Action<Venda>(this.attach_Vendas), new Action<Venda>(this.detach_Vendas));
			this._Compras = new EntitySet<Compra>(new Action<Compra>(this.attach_Compras), new Action<Compra>(this.detach_Compras));
			this._Descartes = new EntitySet<Descarte>(new Action<Descarte>(this.attach_Descartes), new Action<Descarte>(this.detach_Descartes));
			this._Descartes1 = new EntitySet<Descarte>(new Action<Descarte>(this.attach_Descartes1), new Action<Descarte>(this.detach_Descartes1));
			this._Estornos = new EntitySet<Estorno>(new Action<Estorno>(this.attach_Estornos), new Action<Estorno>(this.detach_Estornos));
			this._ItemDescartes = new EntitySet<ItemDescarte>(new Action<ItemDescarte>(this.attach_ItemDescartes), new Action<ItemDescarte>(this.detach_ItemDescartes));
			this._Movimentacaos = new EntitySet<Movimentacao>(new Action<Movimentacao>(this.attach_Movimentacaos), new Action<Movimentacao>(this.detach_Movimentacaos));
			this._NotaFiscals = new EntitySet<NotaFiscal>(new Action<NotaFiscal>(this.attach_NotaFiscals), new Action<NotaFiscal>(this.detach_NotaFiscals));
			this._Pessoa = default(EntityRef<Pessoa>);
			this._Empresa = default(EntityRef<Empresa>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_IDFuncionario", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDFuncionario
		{
			get
			{
				return this._IDFuncionario;
			}
			set
			{
				if ((this._IDFuncionario != value))
				{
					this.OnIDFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionario = value;
					this.SendPropertyChanged("IDFuncionario");
					this.OnIDFuncionarioChanged();
				}
			}
		}
		
		[Column(Storage="_IDUsuario", DbType="Int")]
		public System.Nullable<int> IDUsuario
		{
			get
			{
				return this._IDUsuario;
			}
			set
			{
				if ((this._IDUsuario != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IDUsuario = value;
					this.SendPropertyChanged("IDUsuario");
					this.OnIDUsuarioChanged();
				}
			}
		}
		
		[Column(Storage="_cpf", DbType="Char(11)")]
		public string cpf
		{
			get
			{
				return this._cpf;
			}
			set
			{
				if ((this._cpf != value))
				{
					this.OncpfChanging(value);
					this.SendPropertyChanging();
					this._cpf = value;
					this.SendPropertyChanged("cpf");
					this.OncpfChanged();
				}
			}
		}
		
		[Column(Storage="_rg", DbType="Int")]
		public System.Nullable<int> rg
		{
			get
			{
				return this._rg;
			}
			set
			{
				if ((this._rg != value))
				{
					this.OnrgChanging(value);
					this.SendPropertyChanging();
					this._rg = value;
					this.SendPropertyChanged("rg");
					this.OnrgChanged();
				}
			}
		}
		
		[Column(Storage="_orgaoEmissorRg", DbType="Int")]
		public System.Nullable<int> orgaoEmissorRg
		{
			get
			{
				return this._orgaoEmissorRg;
			}
			set
			{
				if ((this._orgaoEmissorRg != value))
				{
					this.OnorgaoEmissorRgChanging(value);
					this.SendPropertyChanging();
					this._orgaoEmissorRg = value;
					this.SendPropertyChanged("orgaoEmissorRg");
					this.OnorgaoEmissorRgChanged();
				}
			}
		}
		
		[Column(Storage="_naturalidade", DbType="VarChar(50)")]
		public string naturalidade
		{
			get
			{
				return this._naturalidade;
			}
			set
			{
				if ((this._naturalidade != value))
				{
					this.OnnaturalidadeChanging(value);
					this.SendPropertyChanging();
					this._naturalidade = value;
					this.SendPropertyChanged("naturalidade");
					this.OnnaturalidadeChanged();
				}
			}
		}
		
		[Column(Storage="_nacionalidade", DbType="VarChar(50)")]
		public string nacionalidade
		{
			get
			{
				return this._nacionalidade;
			}
			set
			{
				if ((this._nacionalidade != value))
				{
					this.OnnacionalidadeChanging(value);
					this.SendPropertyChanging();
					this._nacionalidade = value;
					this.SendPropertyChanged("nacionalidade");
					this.OnnacionalidadeChanged();
				}
			}
		}
		
		[Column(Storage="_tipoFuncionario", DbType="VarChar(15)")]
		public string tipoFuncionario
		{
			get
			{
				return this._tipoFuncionario;
			}
			set
			{
				if ((this._tipoFuncionario != value))
				{
					this.OntipoFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._tipoFuncionario = value;
					this.SendPropertyChanged("tipoFuncionario");
					this.OntipoFuncionarioChanged();
				}
			}
		}
		
		[Column(Storage="_IDEmpresa", DbType="Int")]
		public System.Nullable<int> IDEmpresa
		{
			get
			{
				return this._IDEmpresa;
			}
			set
			{
				if ((this._IDEmpresa != value))
				{
					if (this._Empresa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEmpresaChanging(value);
					this.SendPropertyChanging();
					this._IDEmpresa = value;
					this.SendPropertyChanged("IDEmpresa");
					this.OnIDEmpresaChanged();
				}
			}
		}
		
		[Column(Storage="_dataCadastro", DbType="Date")]
		public System.Nullable<System.DateTime> dataCadastro
		{
			get
			{
				return this._dataCadastro;
			}
			set
			{
				if ((this._dataCadastro != value))
				{
					this.OndataCadastroChanging(value);
					this.SendPropertyChanging();
					this._dataCadastro = value;
					this.SendPropertyChanged("dataCadastro");
					this.OndataCadastroChanged();
				}
			}
		}
		
		[Column(Storage="_isAtivo", DbType="Bit")]
		public System.Nullable<bool> isAtivo
		{
			get
			{
				return this._isAtivo;
			}
			set
			{
				if ((this._isAtivo != value))
				{
					this.OnisAtivoChanging(value);
					this.SendPropertyChanging();
					this._isAtivo = value;
					this.SendPropertyChanged("isAtivo");
					this.OnisAtivoChanged();
				}
			}
		}
		
		[Association(Name="Funcionario_Caixa", Storage="_Caixas", ThisKey="IDFuncionario", OtherKey="IDFuncionario")]
		public EntitySet<Caixa> Caixas
		{
			get
			{
				return this._Caixas;
			}
			set
			{
				this._Caixas.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Venda", Storage="_Vendas", ThisKey="IDFuncionario", OtherKey="IDFuncionario")]
		public EntitySet<Venda> Vendas
		{
			get
			{
				return this._Vendas;
			}
			set
			{
				this._Vendas.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Compra", Storage="_Compras", ThisKey="IDFuncionario", OtherKey="IDFuncionario")]
		public EntitySet<Compra> Compras
		{
			get
			{
				return this._Compras;
			}
			set
			{
				this._Compras.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Descarte", Storage="_Descartes", ThisKey="IDFuncionario", OtherKey="IDFuncionarioOrdem")]
		public EntitySet<Descarte> Descartes
		{
			get
			{
				return this._Descartes;
			}
			set
			{
				this._Descartes.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Descarte1", Storage="_Descartes1", ThisKey="IDFuncionario", OtherKey="IDFuncionarioDescarte")]
		public EntitySet<Descarte> Descartes1
		{
			get
			{
				return this._Descartes1;
			}
			set
			{
				this._Descartes1.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Estorno", Storage="_Estornos", ThisKey="IDFuncionario", OtherKey="IDFuncionario")]
		public EntitySet<Estorno> Estornos
		{
			get
			{
				return this._Estornos;
			}
			set
			{
				this._Estornos.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_ItemDescarte", Storage="_ItemDescartes", ThisKey="IDFuncionario", OtherKey="IDFuncionario")]
		public EntitySet<ItemDescarte> ItemDescartes
		{
			get
			{
				return this._ItemDescartes;
			}
			set
			{
				this._ItemDescartes.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Movimentacao", Storage="_Movimentacaos", ThisKey="IDFuncionario", OtherKey="IDFuncionario")]
		public EntitySet<Movimentacao> Movimentacaos
		{
			get
			{
				return this._Movimentacaos;
			}
			set
			{
				this._Movimentacaos.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_NotaFiscal", Storage="_NotaFiscals", ThisKey="IDFuncionario", OtherKey="IDFuncionario")]
		public EntitySet<NotaFiscal> NotaFiscals
		{
			get
			{
				return this._NotaFiscals;
			}
			set
			{
				this._NotaFiscals.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_Pessoa", Storage="_Pessoa", ThisKey="IDFuncionario", OtherKey="IDPessoa", IsUnique=true, IsForeignKey=false)]
		public Pessoa Pessoa
		{
			get
			{
				return this._Pessoa.Entity;
			}
			set
			{
				Pessoa previousValue = this._Pessoa.Entity;
				if (((previousValue != value) 
							|| (this._Pessoa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pessoa.Entity = null;
						previousValue.Funcionario = null;
					}
					this._Pessoa.Entity = value;
					if ((value != null))
					{
						value.Funcionario = this;
					}
					this.SendPropertyChanged("Pessoa");
				}
			}
		}
		
		[Association(Name="Empresa_Funcionario", Storage="_Empresa", ThisKey="IDEmpresa", OtherKey="IDEmpresa", IsForeignKey=true)]
		public Empresa Empresa
		{
			get
			{
				return this._Empresa.Entity;
			}
			set
			{
				Empresa previousValue = this._Empresa.Entity;
				if (((previousValue != value) 
							|| (this._Empresa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empresa.Entity = null;
						previousValue.Funcionarios.Remove(this);
					}
					this._Empresa.Entity = value;
					if ((value != null))
					{
						value.Funcionarios.Add(this);
						this._IDEmpresa = value.IDEmpresa;
					}
					else
					{
						this._IDEmpresa = default(Nullable<int>);
					}
					this.SendPropertyChanged("Empresa");
				}
			}
		}
		
		[Association(Name="Usuario_Funcionario", Storage="_Usuario", ThisKey="IDUsuario", OtherKey="IDLogin", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Funcionarios.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Funcionarios.Add(this);
						this._IDUsuario = value.IDLogin;
					}
					else
					{
						this._IDUsuario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Caixas(Caixa entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = this;
		}
		
		private void detach_Caixas(Caixa entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = null;
		}
		
		private void attach_Vendas(Venda entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = this;
		}
		
		private void detach_Vendas(Venda entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = null;
		}
		
		private void attach_Compras(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = this;
		}
		
		private void detach_Compras(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = null;
		}
		
		private void attach_Descartes(Descarte entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = this;
		}
		
		private void detach_Descartes(Descarte entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = null;
		}
		
		private void attach_Descartes1(Descarte entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario1 = this;
		}
		
		private void detach_Descartes1(Descarte entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario1 = null;
		}
		
		private void attach_Estornos(Estorno entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = this;
		}
		
		private void detach_Estornos(Estorno entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = null;
		}
		
		private void attach_ItemDescartes(ItemDescarte entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = this;
		}
		
		private void detach_ItemDescartes(ItemDescarte entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = null;
		}
		
		private void attach_Movimentacaos(Movimentacao entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = this;
		}
		
		private void detach_Movimentacaos(Movimentacao entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = null;
		}
		
		private void attach_NotaFiscals(NotaFiscal entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = this;
		}
		
		private void detach_NotaFiscals(NotaFiscal entity)
		{
			this.SendPropertyChanging();
			entity.Funcionario = null;
		}
	}
	
	[Table(Name="dbo.Instituicao")]
	public partial class Instituicao : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDInstituicao;
		
		private string _razaoSocial;
		
		private System.Nullable<System.DateTime> _dataCadastro;
		
		private EntitySet<Descarte> _Descartes;
		
		private EntityRef<Pessoa> _Pessoa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDInstituicaoChanging(int value);
    partial void OnIDInstituicaoChanged();
    partial void OnrazaoSocialChanging(string value);
    partial void OnrazaoSocialChanged();
    partial void OndataCadastroChanging(System.Nullable<System.DateTime> value);
    partial void OndataCadastroChanged();
    #endregion
		
		public Instituicao()
		{
			this._Descartes = new EntitySet<Descarte>(new Action<Descarte>(this.attach_Descartes), new Action<Descarte>(this.detach_Descartes));
			this._Pessoa = default(EntityRef<Pessoa>);
			OnCreated();
		}
		
		[Column(Storage="_IDInstituicao", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDInstituicao
		{
			get
			{
				return this._IDInstituicao;
			}
			set
			{
				if ((this._IDInstituicao != value))
				{
					this.OnIDInstituicaoChanging(value);
					this.SendPropertyChanging();
					this._IDInstituicao = value;
					this.SendPropertyChanged("IDInstituicao");
					this.OnIDInstituicaoChanged();
				}
			}
		}
		
		[Column(Storage="_razaoSocial", DbType="NChar(10)")]
		public string razaoSocial
		{
			get
			{
				return this._razaoSocial;
			}
			set
			{
				if ((this._razaoSocial != value))
				{
					this.OnrazaoSocialChanging(value);
					this.SendPropertyChanging();
					this._razaoSocial = value;
					this.SendPropertyChanged("razaoSocial");
					this.OnrazaoSocialChanged();
				}
			}
		}
		
		[Column(Storage="_dataCadastro", DbType="Date")]
		public System.Nullable<System.DateTime> dataCadastro
		{
			get
			{
				return this._dataCadastro;
			}
			set
			{
				if ((this._dataCadastro != value))
				{
					this.OndataCadastroChanging(value);
					this.SendPropertyChanging();
					this._dataCadastro = value;
					this.SendPropertyChanged("dataCadastro");
					this.OndataCadastroChanged();
				}
			}
		}
		
		[Association(Name="Instituicao_Descarte", Storage="_Descartes", ThisKey="IDInstituicao", OtherKey="IDDestino")]
		public EntitySet<Descarte> Descartes
		{
			get
			{
				return this._Descartes;
			}
			set
			{
				this._Descartes.Assign(value);
			}
		}
		
		[Association(Name="Instituicao_Pessoa", Storage="_Pessoa", ThisKey="IDInstituicao", OtherKey="IDPessoa", IsUnique=true, IsForeignKey=false)]
		public Pessoa Pessoa
		{
			get
			{
				return this._Pessoa.Entity;
			}
			set
			{
				Pessoa previousValue = this._Pessoa.Entity;
				if (((previousValue != value) 
							|| (this._Pessoa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pessoa.Entity = null;
						previousValue.Instituicao = null;
					}
					this._Pessoa.Entity = value;
					if ((value != null))
					{
						value.Instituicao = this;
					}
					this.SendPropertyChanged("Pessoa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Descartes(Descarte entity)
		{
			this.SendPropertyChanging();
			entity.Instituicao = this;
		}
		
		private void detach_Descartes(Descarte entity)
		{
			this.SendPropertyChanging();
			entity.Instituicao = null;
		}
	}
	
	[Table(Name="dbo.ItemDescarte")]
	public partial class ItemDescarte : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDItemVencido;
		
		private System.Nullable<int> _quantidade;
		
		private string _acao;
		
		private System.Nullable<int> _IDItemEstoque;
		
		private System.Nullable<int> _IDDestino;
		
		private System.Nullable<int> _IDFuncionario;
		
		private EntityRef<Funcionario> _Funcionario;
		
		private EntityRef<ItemEstoque> _ItemEstoque;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDItemVencidoChanging(int value);
    partial void OnIDItemVencidoChanged();
    partial void OnquantidadeChanging(System.Nullable<int> value);
    partial void OnquantidadeChanged();
    partial void OnacaoChanging(string value);
    partial void OnacaoChanged();
    partial void OnIDItemEstoqueChanging(System.Nullable<int> value);
    partial void OnIDItemEstoqueChanged();
    partial void OnIDDestinoChanging(System.Nullable<int> value);
    partial void OnIDDestinoChanged();
    partial void OnIDFuncionarioChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioChanged();
    #endregion
		
		public ItemDescarte()
		{
			this._Funcionario = default(EntityRef<Funcionario>);
			this._ItemEstoque = default(EntityRef<ItemEstoque>);
			OnCreated();
		}
		
		[Column(Storage="_IDItemVencido", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDItemVencido
		{
			get
			{
				return this._IDItemVencido;
			}
			set
			{
				if ((this._IDItemVencido != value))
				{
					this.OnIDItemVencidoChanging(value);
					this.SendPropertyChanging();
					this._IDItemVencido = value;
					this.SendPropertyChanged("IDItemVencido");
					this.OnIDItemVencidoChanged();
				}
			}
		}
		
		[Column(Storage="_quantidade", DbType="Int")]
		public System.Nullable<int> quantidade
		{
			get
			{
				return this._quantidade;
			}
			set
			{
				if ((this._quantidade != value))
				{
					this.OnquantidadeChanging(value);
					this.SendPropertyChanging();
					this._quantidade = value;
					this.SendPropertyChanged("quantidade");
					this.OnquantidadeChanged();
				}
			}
		}
		
		[Column(Storage="_acao", DbType="VarChar(20)")]
		public string acao
		{
			get
			{
				return this._acao;
			}
			set
			{
				if ((this._acao != value))
				{
					this.OnacaoChanging(value);
					this.SendPropertyChanging();
					this._acao = value;
					this.SendPropertyChanged("acao");
					this.OnacaoChanged();
				}
			}
		}
		
		[Column(Storage="_IDItemEstoque", DbType="Int")]
		public System.Nullable<int> IDItemEstoque
		{
			get
			{
				return this._IDItemEstoque;
			}
			set
			{
				if ((this._IDItemEstoque != value))
				{
					if (this._ItemEstoque.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemEstoqueChanging(value);
					this.SendPropertyChanging();
					this._IDItemEstoque = value;
					this.SendPropertyChanged("IDItemEstoque");
					this.OnIDItemEstoqueChanged();
				}
			}
		}
		
		[Column(Storage="_IDDestino", DbType="Int")]
		public System.Nullable<int> IDDestino
		{
			get
			{
				return this._IDDestino;
			}
			set
			{
				if ((this._IDDestino != value))
				{
					this.OnIDDestinoChanging(value);
					this.SendPropertyChanging();
					this._IDDestino = value;
					this.SendPropertyChanged("IDDestino");
					this.OnIDDestinoChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionario", DbType="Int")]
		public System.Nullable<int> IDFuncionario
		{
			get
			{
				return this._IDFuncionario;
			}
			set
			{
				if ((this._IDFuncionario != value))
				{
					if (this._Funcionario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionario = value;
					this.SendPropertyChanged("IDFuncionario");
					this.OnIDFuncionarioChanged();
				}
			}
		}
		
		[Association(Name="Funcionario_ItemDescarte", Storage="_Funcionario", ThisKey="IDFuncionario", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.ItemDescartes.Remove(this);
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.ItemDescartes.Add(this);
						this._IDFuncionario = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		[Association(Name="ItemEstoque_ItemDescarte", Storage="_ItemEstoque", ThisKey="IDItemEstoque", OtherKey="IDItemEstoque", IsForeignKey=true)]
		public ItemEstoque ItemEstoque
		{
			get
			{
				return this._ItemEstoque.Entity;
			}
			set
			{
				ItemEstoque previousValue = this._ItemEstoque.Entity;
				if (((previousValue != value) 
							|| (this._ItemEstoque.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemEstoque.Entity = null;
						previousValue.ItemDescartes.Remove(this);
					}
					this._ItemEstoque.Entity = value;
					if ((value != null))
					{
						value.ItemDescartes.Add(this);
						this._IDItemEstoque = value.IDItemEstoque;
					}
					else
					{
						this._IDItemEstoque = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemEstoque");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ItemEstoque")]
	public partial class ItemEstoque : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDItemEstoque;
		
		private System.Nullable<int> _quantidade;
		
		private System.Nullable<decimal> _precoCusto;
		
		private System.Nullable<decimal> _precoVenda;
		
		private System.Nullable<int> _IDLote;
		
		private System.Nullable<System.DateTime> _dataCadastro;
		
		private System.Nullable<System.DateTime> _dataUltimaAlteracao;
		
		private EntitySet<ItemDescarte> _ItemDescartes;
		
		private EntitySet<ItemEstorno> _ItemEstornos;
		
		private EntitySet<ItemNotaFiscal> _ItemNotaFiscals;
		
		private EntitySet<ItemVenda> _ItemVendas;
		
		private EntityRef<Lote> _Lote;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDItemEstoqueChanging(int value);
    partial void OnIDItemEstoqueChanged();
    partial void OnquantidadeChanging(System.Nullable<int> value);
    partial void OnquantidadeChanged();
    partial void OnprecoCustoChanging(System.Nullable<decimal> value);
    partial void OnprecoCustoChanged();
    partial void OnprecoVendaChanging(System.Nullable<decimal> value);
    partial void OnprecoVendaChanged();
    partial void OnIDLoteChanging(System.Nullable<int> value);
    partial void OnIDLoteChanged();
    partial void OndataCadastroChanging(System.Nullable<System.DateTime> value);
    partial void OndataCadastroChanged();
    partial void OndataUltimaAlteracaoChanging(System.Nullable<System.DateTime> value);
    partial void OndataUltimaAlteracaoChanged();
    #endregion
		
		public ItemEstoque()
		{
			this._ItemDescartes = new EntitySet<ItemDescarte>(new Action<ItemDescarte>(this.attach_ItemDescartes), new Action<ItemDescarte>(this.detach_ItemDescartes));
			this._ItemEstornos = new EntitySet<ItemEstorno>(new Action<ItemEstorno>(this.attach_ItemEstornos), new Action<ItemEstorno>(this.detach_ItemEstornos));
			this._ItemNotaFiscals = new EntitySet<ItemNotaFiscal>(new Action<ItemNotaFiscal>(this.attach_ItemNotaFiscals), new Action<ItemNotaFiscal>(this.detach_ItemNotaFiscals));
			this._ItemVendas = new EntitySet<ItemVenda>(new Action<ItemVenda>(this.attach_ItemVendas), new Action<ItemVenda>(this.detach_ItemVendas));
			this._Lote = default(EntityRef<Lote>);
			OnCreated();
		}
		
		[Column(Storage="_IDItemEstoque", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDItemEstoque
		{
			get
			{
				return this._IDItemEstoque;
			}
			set
			{
				if ((this._IDItemEstoque != value))
				{
					this.OnIDItemEstoqueChanging(value);
					this.SendPropertyChanging();
					this._IDItemEstoque = value;
					this.SendPropertyChanged("IDItemEstoque");
					this.OnIDItemEstoqueChanged();
				}
			}
		}
		
		[Column(Storage="_quantidade", DbType="Int")]
		public System.Nullable<int> quantidade
		{
			get
			{
				return this._quantidade;
			}
			set
			{
				if ((this._quantidade != value))
				{
					this.OnquantidadeChanging(value);
					this.SendPropertyChanging();
					this._quantidade = value;
					this.SendPropertyChanged("quantidade");
					this.OnquantidadeChanged();
				}
			}
		}
		
		[Column(Storage="_precoCusto", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> precoCusto
		{
			get
			{
				return this._precoCusto;
			}
			set
			{
				if ((this._precoCusto != value))
				{
					this.OnprecoCustoChanging(value);
					this.SendPropertyChanging();
					this._precoCusto = value;
					this.SendPropertyChanged("precoCusto");
					this.OnprecoCustoChanged();
				}
			}
		}
		
		[Column(Storage="_precoVenda", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> precoVenda
		{
			get
			{
				return this._precoVenda;
			}
			set
			{
				if ((this._precoVenda != value))
				{
					this.OnprecoVendaChanging(value);
					this.SendPropertyChanging();
					this._precoVenda = value;
					this.SendPropertyChanged("precoVenda");
					this.OnprecoVendaChanged();
				}
			}
		}
		
		[Column(Storage="_IDLote", DbType="Int")]
		public System.Nullable<int> IDLote
		{
			get
			{
				return this._IDLote;
			}
			set
			{
				if ((this._IDLote != value))
				{
					if (this._Lote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLoteChanging(value);
					this.SendPropertyChanging();
					this._IDLote = value;
					this.SendPropertyChanged("IDLote");
					this.OnIDLoteChanged();
				}
			}
		}
		
		[Column(Storage="_dataCadastro", DbType="Date")]
		public System.Nullable<System.DateTime> dataCadastro
		{
			get
			{
				return this._dataCadastro;
			}
			set
			{
				if ((this._dataCadastro != value))
				{
					this.OndataCadastroChanging(value);
					this.SendPropertyChanging();
					this._dataCadastro = value;
					this.SendPropertyChanged("dataCadastro");
					this.OndataCadastroChanged();
				}
			}
		}
		
		[Column(Storage="_dataUltimaAlteracao", DbType="Date")]
		public System.Nullable<System.DateTime> dataUltimaAlteracao
		{
			get
			{
				return this._dataUltimaAlteracao;
			}
			set
			{
				if ((this._dataUltimaAlteracao != value))
				{
					this.OndataUltimaAlteracaoChanging(value);
					this.SendPropertyChanging();
					this._dataUltimaAlteracao = value;
					this.SendPropertyChanged("dataUltimaAlteracao");
					this.OndataUltimaAlteracaoChanged();
				}
			}
		}
		
		[Association(Name="ItemEstoque_ItemDescarte", Storage="_ItemDescartes", ThisKey="IDItemEstoque", OtherKey="IDItemEstoque")]
		public EntitySet<ItemDescarte> ItemDescartes
		{
			get
			{
				return this._ItemDescartes;
			}
			set
			{
				this._ItemDescartes.Assign(value);
			}
		}
		
		[Association(Name="ItemEstoque_ItemEstorno", Storage="_ItemEstornos", ThisKey="IDItemEstoque", OtherKey="IDItemEstoque")]
		public EntitySet<ItemEstorno> ItemEstornos
		{
			get
			{
				return this._ItemEstornos;
			}
			set
			{
				this._ItemEstornos.Assign(value);
			}
		}
		
		[Association(Name="ItemEstoque_ItemNotaFiscal", Storage="_ItemNotaFiscals", ThisKey="IDItemEstoque", OtherKey="IDItemEstoque")]
		public EntitySet<ItemNotaFiscal> ItemNotaFiscals
		{
			get
			{
				return this._ItemNotaFiscals;
			}
			set
			{
				this._ItemNotaFiscals.Assign(value);
			}
		}
		
		[Association(Name="ItemEstoque_ItemVenda", Storage="_ItemVendas", ThisKey="IDItemEstoque", OtherKey="IDItemEstoque")]
		public EntitySet<ItemVenda> ItemVendas
		{
			get
			{
				return this._ItemVendas;
			}
			set
			{
				this._ItemVendas.Assign(value);
			}
		}
		
		[Association(Name="Lote_ItemEstoque", Storage="_Lote", ThisKey="IDLote", OtherKey="IDLote", IsForeignKey=true)]
		public Lote Lote
		{
			get
			{
				return this._Lote.Entity;
			}
			set
			{
				Lote previousValue = this._Lote.Entity;
				if (((previousValue != value) 
							|| (this._Lote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lote.Entity = null;
						previousValue.ItemEstoques.Remove(this);
					}
					this._Lote.Entity = value;
					if ((value != null))
					{
						value.ItemEstoques.Add(this);
						this._IDLote = value.IDLote;
					}
					else
					{
						this._IDLote = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lote");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemDescartes(ItemDescarte entity)
		{
			this.SendPropertyChanging();
			entity.ItemEstoque = this;
		}
		
		private void detach_ItemDescartes(ItemDescarte entity)
		{
			this.SendPropertyChanging();
			entity.ItemEstoque = null;
		}
		
		private void attach_ItemEstornos(ItemEstorno entity)
		{
			this.SendPropertyChanging();
			entity.ItemEstoque = this;
		}
		
		private void detach_ItemEstornos(ItemEstorno entity)
		{
			this.SendPropertyChanging();
			entity.ItemEstoque = null;
		}
		
		private void attach_ItemNotaFiscals(ItemNotaFiscal entity)
		{
			this.SendPropertyChanging();
			entity.ItemEstoque = this;
		}
		
		private void detach_ItemNotaFiscals(ItemNotaFiscal entity)
		{
			this.SendPropertyChanging();
			entity.ItemEstoque = null;
		}
		
		private void attach_ItemVendas(ItemVenda entity)
		{
			this.SendPropertyChanging();
			entity.ItemEstoque = this;
		}
		
		private void detach_ItemVendas(ItemVenda entity)
		{
			this.SendPropertyChanging();
			entity.ItemEstoque = null;
		}
	}
	
	[Table(Name="dbo.ItemEstorno")]
	public partial class ItemEstorno : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDItemEstorno;
		
		private System.Nullable<int> _quantidade;
		
		private System.Nullable<int> _IDItemEstoque;
		
		private System.Nullable<int> _IDEstorno;
		
		private System.Nullable<int> _IDVenda;
		
		private EntityRef<Estorno> _Estorno;
		
		private EntityRef<ItemEstoque> _ItemEstoque;
		
		private EntityRef<Venda> _Venda;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDItemEstornoChanging(int value);
    partial void OnIDItemEstornoChanged();
    partial void OnquantidadeChanging(System.Nullable<int> value);
    partial void OnquantidadeChanged();
    partial void OnIDItemEstoqueChanging(System.Nullable<int> value);
    partial void OnIDItemEstoqueChanged();
    partial void OnIDEstornoChanging(System.Nullable<int> value);
    partial void OnIDEstornoChanged();
    partial void OnIDVendaChanging(System.Nullable<int> value);
    partial void OnIDVendaChanged();
    #endregion
		
		public ItemEstorno()
		{
			this._Estorno = default(EntityRef<Estorno>);
			this._ItemEstoque = default(EntityRef<ItemEstoque>);
			this._Venda = default(EntityRef<Venda>);
			OnCreated();
		}
		
		[Column(Storage="_IDItemEstorno", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDItemEstorno
		{
			get
			{
				return this._IDItemEstorno;
			}
			set
			{
				if ((this._IDItemEstorno != value))
				{
					this.OnIDItemEstornoChanging(value);
					this.SendPropertyChanging();
					this._IDItemEstorno = value;
					this.SendPropertyChanged("IDItemEstorno");
					this.OnIDItemEstornoChanged();
				}
			}
		}
		
		[Column(Storage="_quantidade", DbType="Int")]
		public System.Nullable<int> quantidade
		{
			get
			{
				return this._quantidade;
			}
			set
			{
				if ((this._quantidade != value))
				{
					this.OnquantidadeChanging(value);
					this.SendPropertyChanging();
					this._quantidade = value;
					this.SendPropertyChanged("quantidade");
					this.OnquantidadeChanged();
				}
			}
		}
		
		[Column(Storage="_IDItemEstoque", DbType="Int")]
		public System.Nullable<int> IDItemEstoque
		{
			get
			{
				return this._IDItemEstoque;
			}
			set
			{
				if ((this._IDItemEstoque != value))
				{
					if (this._ItemEstoque.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemEstoqueChanging(value);
					this.SendPropertyChanging();
					this._IDItemEstoque = value;
					this.SendPropertyChanged("IDItemEstoque");
					this.OnIDItemEstoqueChanged();
				}
			}
		}
		
		[Column(Storage="_IDEstorno", DbType="Int")]
		public System.Nullable<int> IDEstorno
		{
			get
			{
				return this._IDEstorno;
			}
			set
			{
				if ((this._IDEstorno != value))
				{
					if (this._Estorno.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEstornoChanging(value);
					this.SendPropertyChanging();
					this._IDEstorno = value;
					this.SendPropertyChanged("IDEstorno");
					this.OnIDEstornoChanged();
				}
			}
		}
		
		[Column(Storage="_IDVenda", DbType="Int")]
		public System.Nullable<int> IDVenda
		{
			get
			{
				return this._IDVenda;
			}
			set
			{
				if ((this._IDVenda != value))
				{
					if (this._Venda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDVendaChanging(value);
					this.SendPropertyChanging();
					this._IDVenda = value;
					this.SendPropertyChanged("IDVenda");
					this.OnIDVendaChanged();
				}
			}
		}
		
		[Association(Name="Estorno_ItemEstorno", Storage="_Estorno", ThisKey="IDEstorno", OtherKey="IDEstorno", IsForeignKey=true)]
		public Estorno Estorno
		{
			get
			{
				return this._Estorno.Entity;
			}
			set
			{
				Estorno previousValue = this._Estorno.Entity;
				if (((previousValue != value) 
							|| (this._Estorno.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estorno.Entity = null;
						previousValue.ItemEstornos.Remove(this);
					}
					this._Estorno.Entity = value;
					if ((value != null))
					{
						value.ItemEstornos.Add(this);
						this._IDEstorno = value.IDEstorno;
					}
					else
					{
						this._IDEstorno = default(Nullable<int>);
					}
					this.SendPropertyChanged("Estorno");
				}
			}
		}
		
		[Association(Name="ItemEstoque_ItemEstorno", Storage="_ItemEstoque", ThisKey="IDItemEstoque", OtherKey="IDItemEstoque", IsForeignKey=true)]
		public ItemEstoque ItemEstoque
		{
			get
			{
				return this._ItemEstoque.Entity;
			}
			set
			{
				ItemEstoque previousValue = this._ItemEstoque.Entity;
				if (((previousValue != value) 
							|| (this._ItemEstoque.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemEstoque.Entity = null;
						previousValue.ItemEstornos.Remove(this);
					}
					this._ItemEstoque.Entity = value;
					if ((value != null))
					{
						value.ItemEstornos.Add(this);
						this._IDItemEstoque = value.IDItemEstoque;
					}
					else
					{
						this._IDItemEstoque = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemEstoque");
				}
			}
		}
		
		[Association(Name="Venda_ItemEstorno", Storage="_Venda", ThisKey="IDVenda", OtherKey="IDVenda", IsForeignKey=true)]
		public Venda Venda
		{
			get
			{
				return this._Venda.Entity;
			}
			set
			{
				Venda previousValue = this._Venda.Entity;
				if (((previousValue != value) 
							|| (this._Venda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venda.Entity = null;
						previousValue.ItemEstornos.Remove(this);
					}
					this._Venda.Entity = value;
					if ((value != null))
					{
						value.ItemEstornos.Add(this);
						this._IDVenda = value.IDVenda;
					}
					else
					{
						this._IDVenda = default(Nullable<int>);
					}
					this.SendPropertyChanged("Venda");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ItemNotaFiscal")]
	public partial class ItemNotaFiscal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDItemNotaFiscal;
		
		private System.Nullable<int> _quantidade;
		
		private System.Nullable<int> _IDItemEstoque;
		
		private System.Nullable<int> _IDNotaFiscal;
		
		private EntityRef<ItemEstoque> _ItemEstoque;
		
		private EntityRef<NotaFiscal> _NotaFiscal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDItemNotaFiscalChanging(int value);
    partial void OnIDItemNotaFiscalChanged();
    partial void OnquantidadeChanging(System.Nullable<int> value);
    partial void OnquantidadeChanged();
    partial void OnIDItemEstoqueChanging(System.Nullable<int> value);
    partial void OnIDItemEstoqueChanged();
    partial void OnIDNotaFiscalChanging(System.Nullable<int> value);
    partial void OnIDNotaFiscalChanged();
    #endregion
		
		public ItemNotaFiscal()
		{
			this._ItemEstoque = default(EntityRef<ItemEstoque>);
			this._NotaFiscal = default(EntityRef<NotaFiscal>);
			OnCreated();
		}
		
		[Column(Storage="_IDItemNotaFiscal", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDItemNotaFiscal
		{
			get
			{
				return this._IDItemNotaFiscal;
			}
			set
			{
				if ((this._IDItemNotaFiscal != value))
				{
					this.OnIDItemNotaFiscalChanging(value);
					this.SendPropertyChanging();
					this._IDItemNotaFiscal = value;
					this.SendPropertyChanged("IDItemNotaFiscal");
					this.OnIDItemNotaFiscalChanged();
				}
			}
		}
		
		[Column(Storage="_quantidade", DbType="Int")]
		public System.Nullable<int> quantidade
		{
			get
			{
				return this._quantidade;
			}
			set
			{
				if ((this._quantidade != value))
				{
					this.OnquantidadeChanging(value);
					this.SendPropertyChanging();
					this._quantidade = value;
					this.SendPropertyChanged("quantidade");
					this.OnquantidadeChanged();
				}
			}
		}
		
		[Column(Storage="_IDItemEstoque", DbType="Int")]
		public System.Nullable<int> IDItemEstoque
		{
			get
			{
				return this._IDItemEstoque;
			}
			set
			{
				if ((this._IDItemEstoque != value))
				{
					if (this._ItemEstoque.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemEstoqueChanging(value);
					this.SendPropertyChanging();
					this._IDItemEstoque = value;
					this.SendPropertyChanged("IDItemEstoque");
					this.OnIDItemEstoqueChanged();
				}
			}
		}
		
		[Column(Storage="_IDNotaFiscal", DbType="Int")]
		public System.Nullable<int> IDNotaFiscal
		{
			get
			{
				return this._IDNotaFiscal;
			}
			set
			{
				if ((this._IDNotaFiscal != value))
				{
					if (this._NotaFiscal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNotaFiscalChanging(value);
					this.SendPropertyChanging();
					this._IDNotaFiscal = value;
					this.SendPropertyChanged("IDNotaFiscal");
					this.OnIDNotaFiscalChanged();
				}
			}
		}
		
		[Association(Name="ItemEstoque_ItemNotaFiscal", Storage="_ItemEstoque", ThisKey="IDItemEstoque", OtherKey="IDItemEstoque", IsForeignKey=true)]
		public ItemEstoque ItemEstoque
		{
			get
			{
				return this._ItemEstoque.Entity;
			}
			set
			{
				ItemEstoque previousValue = this._ItemEstoque.Entity;
				if (((previousValue != value) 
							|| (this._ItemEstoque.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemEstoque.Entity = null;
						previousValue.ItemNotaFiscals.Remove(this);
					}
					this._ItemEstoque.Entity = value;
					if ((value != null))
					{
						value.ItemNotaFiscals.Add(this);
						this._IDItemEstoque = value.IDItemEstoque;
					}
					else
					{
						this._IDItemEstoque = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemEstoque");
				}
			}
		}
		
		[Association(Name="NotaFiscal_ItemNotaFiscal", Storage="_NotaFiscal", ThisKey="IDNotaFiscal", OtherKey="IDNotaFiscal", IsForeignKey=true)]
		public NotaFiscal NotaFiscal
		{
			get
			{
				return this._NotaFiscal.Entity;
			}
			set
			{
				NotaFiscal previousValue = this._NotaFiscal.Entity;
				if (((previousValue != value) 
							|| (this._NotaFiscal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NotaFiscal.Entity = null;
						previousValue.ItemNotaFiscals.Remove(this);
					}
					this._NotaFiscal.Entity = value;
					if ((value != null))
					{
						value.ItemNotaFiscals.Add(this);
						this._IDNotaFiscal = value.IDNotaFiscal;
					}
					else
					{
						this._IDNotaFiscal = default(Nullable<int>);
					}
					this.SendPropertyChanged("NotaFiscal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ItemVenda")]
	public partial class ItemVenda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDItemVenda;
		
		private System.Nullable<int> _quantidade;
		
		private System.Nullable<int> _IDItemEstoque;
		
		private System.Nullable<int> _IDVenda;
		
		private EntityRef<ItemEstoque> _ItemEstoque;
		
		private EntityRef<Venda> _Venda;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDItemVendaChanging(int value);
    partial void OnIDItemVendaChanged();
    partial void OnquantidadeChanging(System.Nullable<int> value);
    partial void OnquantidadeChanged();
    partial void OnIDItemEstoqueChanging(System.Nullable<int> value);
    partial void OnIDItemEstoqueChanged();
    partial void OnIDVendaChanging(System.Nullable<int> value);
    partial void OnIDVendaChanged();
    #endregion
		
		public ItemVenda()
		{
			this._ItemEstoque = default(EntityRef<ItemEstoque>);
			this._Venda = default(EntityRef<Venda>);
			OnCreated();
		}
		
		[Column(Storage="_IDItemVenda", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDItemVenda
		{
			get
			{
				return this._IDItemVenda;
			}
			set
			{
				if ((this._IDItemVenda != value))
				{
					this.OnIDItemVendaChanging(value);
					this.SendPropertyChanging();
					this._IDItemVenda = value;
					this.SendPropertyChanged("IDItemVenda");
					this.OnIDItemVendaChanged();
				}
			}
		}
		
		[Column(Storage="_quantidade", DbType="Int")]
		public System.Nullable<int> quantidade
		{
			get
			{
				return this._quantidade;
			}
			set
			{
				if ((this._quantidade != value))
				{
					this.OnquantidadeChanging(value);
					this.SendPropertyChanging();
					this._quantidade = value;
					this.SendPropertyChanged("quantidade");
					this.OnquantidadeChanged();
				}
			}
		}
		
		[Column(Storage="_IDItemEstoque", DbType="Int")]
		public System.Nullable<int> IDItemEstoque
		{
			get
			{
				return this._IDItemEstoque;
			}
			set
			{
				if ((this._IDItemEstoque != value))
				{
					if (this._ItemEstoque.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemEstoqueChanging(value);
					this.SendPropertyChanging();
					this._IDItemEstoque = value;
					this.SendPropertyChanged("IDItemEstoque");
					this.OnIDItemEstoqueChanged();
				}
			}
		}
		
		[Column(Storage="_IDVenda", DbType="Int")]
		public System.Nullable<int> IDVenda
		{
			get
			{
				return this._IDVenda;
			}
			set
			{
				if ((this._IDVenda != value))
				{
					if (this._Venda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDVendaChanging(value);
					this.SendPropertyChanging();
					this._IDVenda = value;
					this.SendPropertyChanged("IDVenda");
					this.OnIDVendaChanged();
				}
			}
		}
		
		[Association(Name="ItemEstoque_ItemVenda", Storage="_ItemEstoque", ThisKey="IDItemEstoque", OtherKey="IDItemEstoque", IsForeignKey=true)]
		public ItemEstoque ItemEstoque
		{
			get
			{
				return this._ItemEstoque.Entity;
			}
			set
			{
				ItemEstoque previousValue = this._ItemEstoque.Entity;
				if (((previousValue != value) 
							|| (this._ItemEstoque.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemEstoque.Entity = null;
						previousValue.ItemVendas.Remove(this);
					}
					this._ItemEstoque.Entity = value;
					if ((value != null))
					{
						value.ItemVendas.Add(this);
						this._IDItemEstoque = value.IDItemEstoque;
					}
					else
					{
						this._IDItemEstoque = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemEstoque");
				}
			}
		}
		
		[Association(Name="Venda_ItemVenda", Storage="_Venda", ThisKey="IDVenda", OtherKey="IDVenda", IsForeignKey=true)]
		public Venda Venda
		{
			get
			{
				return this._Venda.Entity;
			}
			set
			{
				Venda previousValue = this._Venda.Entity;
				if (((previousValue != value) 
							|| (this._Venda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venda.Entity = null;
						previousValue.ItemVendas.Remove(this);
					}
					this._Venda.Entity = value;
					if ((value != null))
					{
						value.ItemVendas.Add(this);
						this._IDVenda = value.IDVenda;
					}
					else
					{
						this._IDVenda = default(Nullable<int>);
					}
					this.SendPropertyChanged("Venda");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Licitacao")]
	public partial class Licitacao : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLicitacao;
		
		private System.Nullable<int> _numero;
		
		private EntitySet<Compra> _Compras;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLicitacaoChanging(int value);
    partial void OnIDLicitacaoChanged();
    partial void OnnumeroChanging(System.Nullable<int> value);
    partial void OnnumeroChanged();
    #endregion
		
		public Licitacao()
		{
			this._Compras = new EntitySet<Compra>(new Action<Compra>(this.attach_Compras), new Action<Compra>(this.detach_Compras));
			OnCreated();
		}
		
		[Column(Storage="_IDLicitacao", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDLicitacao
		{
			get
			{
				return this._IDLicitacao;
			}
			set
			{
				if ((this._IDLicitacao != value))
				{
					this.OnIDLicitacaoChanging(value);
					this.SendPropertyChanging();
					this._IDLicitacao = value;
					this.SendPropertyChanged("IDLicitacao");
					this.OnIDLicitacaoChanged();
				}
			}
		}
		
		[Column(Storage="_numero", DbType="Int")]
		public System.Nullable<int> numero
		{
			get
			{
				return this._numero;
			}
			set
			{
				if ((this._numero != value))
				{
					this.OnnumeroChanging(value);
					this.SendPropertyChanging();
					this._numero = value;
					this.SendPropertyChanged("numero");
					this.OnnumeroChanged();
				}
			}
		}
		
		[Association(Name="Licitacao_Compra", Storage="_Compras", ThisKey="IDLicitacao", OtherKey="IDLicitacao")]
		public EntitySet<Compra> Compras
		{
			get
			{
				return this._Compras;
			}
			set
			{
				this._Compras.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Compras(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Licitacao = this;
		}
		
		private void detach_Compras(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Licitacao = null;
		}
	}
	
	[Table(Name="dbo.Lote")]
	public partial class Lote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLote;
		
		private System.Nullable<System.DateTime> _dataFabricacao;
		
		private System.Nullable<System.DateTime> _dataValidade;
		
		private System.Nullable<int> _numeroLote;
		
		private System.Nullable<int> _IDCompra;
		
		private System.Nullable<int> _IDFornecedor;
		
		private System.Nullable<int> _IDEspecificacao;
		
		private EntitySet<ItemEstoque> _ItemEstoques;
		
		private EntityRef<Compra> _Compra;
		
		private EntityRef<Especificacao> _Especificacao;
		
		private EntityRef<Fornecedor> _Fornecedor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLoteChanging(int value);
    partial void OnIDLoteChanged();
    partial void OndataFabricacaoChanging(System.Nullable<System.DateTime> value);
    partial void OndataFabricacaoChanged();
    partial void OndataValidadeChanging(System.Nullable<System.DateTime> value);
    partial void OndataValidadeChanged();
    partial void OnnumeroLoteChanging(System.Nullable<int> value);
    partial void OnnumeroLoteChanged();
    partial void OnIDCompraChanging(System.Nullable<int> value);
    partial void OnIDCompraChanged();
    partial void OnIDFornecedorChanging(System.Nullable<int> value);
    partial void OnIDFornecedorChanged();
    partial void OnIDEspecificacaoChanging(System.Nullable<int> value);
    partial void OnIDEspecificacaoChanged();
    #endregion
		
		public Lote()
		{
			this._ItemEstoques = new EntitySet<ItemEstoque>(new Action<ItemEstoque>(this.attach_ItemEstoques), new Action<ItemEstoque>(this.detach_ItemEstoques));
			this._Compra = default(EntityRef<Compra>);
			this._Especificacao = default(EntityRef<Especificacao>);
			this._Fornecedor = default(EntityRef<Fornecedor>);
			OnCreated();
		}
		
		[Column(Storage="_IDLote", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDLote
		{
			get
			{
				return this._IDLote;
			}
			set
			{
				if ((this._IDLote != value))
				{
					this.OnIDLoteChanging(value);
					this.SendPropertyChanging();
					this._IDLote = value;
					this.SendPropertyChanged("IDLote");
					this.OnIDLoteChanged();
				}
			}
		}
		
		[Column(Storage="_dataFabricacao", DbType="Date")]
		public System.Nullable<System.DateTime> dataFabricacao
		{
			get
			{
				return this._dataFabricacao;
			}
			set
			{
				if ((this._dataFabricacao != value))
				{
					this.OndataFabricacaoChanging(value);
					this.SendPropertyChanging();
					this._dataFabricacao = value;
					this.SendPropertyChanged("dataFabricacao");
					this.OndataFabricacaoChanged();
				}
			}
		}
		
		[Column(Storage="_dataValidade", DbType="Date")]
		public System.Nullable<System.DateTime> dataValidade
		{
			get
			{
				return this._dataValidade;
			}
			set
			{
				if ((this._dataValidade != value))
				{
					this.OndataValidadeChanging(value);
					this.SendPropertyChanging();
					this._dataValidade = value;
					this.SendPropertyChanged("dataValidade");
					this.OndataValidadeChanged();
				}
			}
		}
		
		[Column(Storage="_numeroLote", DbType="Int")]
		public System.Nullable<int> numeroLote
		{
			get
			{
				return this._numeroLote;
			}
			set
			{
				if ((this._numeroLote != value))
				{
					this.OnnumeroLoteChanging(value);
					this.SendPropertyChanging();
					this._numeroLote = value;
					this.SendPropertyChanged("numeroLote");
					this.OnnumeroLoteChanged();
				}
			}
		}
		
		[Column(Storage="_IDCompra", DbType="Int")]
		public System.Nullable<int> IDCompra
		{
			get
			{
				return this._IDCompra;
			}
			set
			{
				if ((this._IDCompra != value))
				{
					if (this._Compra.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCompraChanging(value);
					this.SendPropertyChanging();
					this._IDCompra = value;
					this.SendPropertyChanged("IDCompra");
					this.OnIDCompraChanged();
				}
			}
		}
		
		[Column(Storage="_IDFornecedor", DbType="Int")]
		public System.Nullable<int> IDFornecedor
		{
			get
			{
				return this._IDFornecedor;
			}
			set
			{
				if ((this._IDFornecedor != value))
				{
					if (this._Fornecedor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFornecedorChanging(value);
					this.SendPropertyChanging();
					this._IDFornecedor = value;
					this.SendPropertyChanged("IDFornecedor");
					this.OnIDFornecedorChanged();
				}
			}
		}
		
		[Column(Storage="_IDEspecificacao", DbType="Int")]
		public System.Nullable<int> IDEspecificacao
		{
			get
			{
				return this._IDEspecificacao;
			}
			set
			{
				if ((this._IDEspecificacao != value))
				{
					if (this._Especificacao.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEspecificacaoChanging(value);
					this.SendPropertyChanging();
					this._IDEspecificacao = value;
					this.SendPropertyChanged("IDEspecificacao");
					this.OnIDEspecificacaoChanged();
				}
			}
		}
		
		[Association(Name="Lote_ItemEstoque", Storage="_ItemEstoques", ThisKey="IDLote", OtherKey="IDLote")]
		public EntitySet<ItemEstoque> ItemEstoques
		{
			get
			{
				return this._ItemEstoques;
			}
			set
			{
				this._ItemEstoques.Assign(value);
			}
		}
		
		[Association(Name="Compra_Lote", Storage="_Compra", ThisKey="IDCompra", OtherKey="IDCompra", IsForeignKey=true)]
		public Compra Compra
		{
			get
			{
				return this._Compra.Entity;
			}
			set
			{
				Compra previousValue = this._Compra.Entity;
				if (((previousValue != value) 
							|| (this._Compra.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Compra.Entity = null;
						previousValue.Lotes.Remove(this);
					}
					this._Compra.Entity = value;
					if ((value != null))
					{
						value.Lotes.Add(this);
						this._IDCompra = value.IDCompra;
					}
					else
					{
						this._IDCompra = default(Nullable<int>);
					}
					this.SendPropertyChanged("Compra");
				}
			}
		}
		
		[Association(Name="Especificacao_Lote", Storage="_Especificacao", ThisKey="IDEspecificacao", OtherKey="IDEspecificacao", IsForeignKey=true)]
		public Especificacao Especificacao
		{
			get
			{
				return this._Especificacao.Entity;
			}
			set
			{
				Especificacao previousValue = this._Especificacao.Entity;
				if (((previousValue != value) 
							|| (this._Especificacao.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especificacao.Entity = null;
						previousValue.Lotes.Remove(this);
					}
					this._Especificacao.Entity = value;
					if ((value != null))
					{
						value.Lotes.Add(this);
						this._IDEspecificacao = value.IDEspecificacao;
					}
					else
					{
						this._IDEspecificacao = default(Nullable<int>);
					}
					this.SendPropertyChanged("Especificacao");
				}
			}
		}
		
		[Association(Name="Fornecedor_Lote", Storage="_Fornecedor", ThisKey="IDFornecedor", OtherKey="IDFornecedor", IsForeignKey=true)]
		public Fornecedor Fornecedor
		{
			get
			{
				return this._Fornecedor.Entity;
			}
			set
			{
				Fornecedor previousValue = this._Fornecedor.Entity;
				if (((previousValue != value) 
							|| (this._Fornecedor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fornecedor.Entity = null;
						previousValue.Lotes.Remove(this);
					}
					this._Fornecedor.Entity = value;
					if ((value != null))
					{
						value.Lotes.Add(this);
						this._IDFornecedor = value.IDFornecedor;
					}
					else
					{
						this._IDFornecedor = default(Nullable<int>);
					}
					this.SendPropertyChanged("Fornecedor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemEstoques(ItemEstoque entity)
		{
			this.SendPropertyChanging();
			entity.Lote = this;
		}
		
		private void detach_ItemEstoques(ItemEstoque entity)
		{
			this.SendPropertyChanging();
			entity.Lote = null;
		}
	}
	
	[Table(Name="dbo.Movimentacao")]
	public partial class Movimentacao : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdMovimentacao;
		
		private System.Nullable<System.DateTime> _dataMovimentacao;
		
		private System.Nullable<int> _IDFuncionario;
		
		private System.Nullable<int> _IDCaixa;
		
		private System.Nullable<int> _IDCliente;
		
		private EntityRef<Caixa> _Caixa;
		
		private EntityRef<Funcionario> _Funcionario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMovimentacaoChanging(int value);
    partial void OnIdMovimentacaoChanged();
    partial void OndataMovimentacaoChanging(System.Nullable<System.DateTime> value);
    partial void OndataMovimentacaoChanged();
    partial void OnIDFuncionarioChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioChanged();
    partial void OnIDCaixaChanging(System.Nullable<int> value);
    partial void OnIDCaixaChanged();
    partial void OnIDClienteChanging(System.Nullable<int> value);
    partial void OnIDClienteChanged();
    #endregion
		
		public Movimentacao()
		{
			this._Caixa = default(EntityRef<Caixa>);
			this._Funcionario = default(EntityRef<Funcionario>);
			OnCreated();
		}
		
		[Column(Storage="_IdMovimentacao", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdMovimentacao
		{
			get
			{
				return this._IdMovimentacao;
			}
			set
			{
				if ((this._IdMovimentacao != value))
				{
					this.OnIdMovimentacaoChanging(value);
					this.SendPropertyChanging();
					this._IdMovimentacao = value;
					this.SendPropertyChanged("IdMovimentacao");
					this.OnIdMovimentacaoChanged();
				}
			}
		}
		
		[Column(Storage="_dataMovimentacao", DbType="Date")]
		public System.Nullable<System.DateTime> dataMovimentacao
		{
			get
			{
				return this._dataMovimentacao;
			}
			set
			{
				if ((this._dataMovimentacao != value))
				{
					this.OndataMovimentacaoChanging(value);
					this.SendPropertyChanging();
					this._dataMovimentacao = value;
					this.SendPropertyChanged("dataMovimentacao");
					this.OndataMovimentacaoChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionario", DbType="Int")]
		public System.Nullable<int> IDFuncionario
		{
			get
			{
				return this._IDFuncionario;
			}
			set
			{
				if ((this._IDFuncionario != value))
				{
					if (this._Funcionario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionario = value;
					this.SendPropertyChanged("IDFuncionario");
					this.OnIDFuncionarioChanged();
				}
			}
		}
		
		[Column(Storage="_IDCaixa", DbType="Int")]
		public System.Nullable<int> IDCaixa
		{
			get
			{
				return this._IDCaixa;
			}
			set
			{
				if ((this._IDCaixa != value))
				{
					if (this._Caixa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCaixaChanging(value);
					this.SendPropertyChanging();
					this._IDCaixa = value;
					this.SendPropertyChanged("IDCaixa");
					this.OnIDCaixaChanged();
				}
			}
		}
		
		[Column(Storage="_IDCliente", DbType="Int")]
		public System.Nullable<int> IDCliente
		{
			get
			{
				return this._IDCliente;
			}
			set
			{
				if ((this._IDCliente != value))
				{
					this.OnIDClienteChanging(value);
					this.SendPropertyChanging();
					this._IDCliente = value;
					this.SendPropertyChanged("IDCliente");
					this.OnIDClienteChanged();
				}
			}
		}
		
		[Association(Name="Caixa_Movimentacao", Storage="_Caixa", ThisKey="IDCaixa", OtherKey="IDCaixa", IsForeignKey=true)]
		public Caixa Caixa
		{
			get
			{
				return this._Caixa.Entity;
			}
			set
			{
				Caixa previousValue = this._Caixa.Entity;
				if (((previousValue != value) 
							|| (this._Caixa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Caixa.Entity = null;
						previousValue.Movimentacaos.Remove(this);
					}
					this._Caixa.Entity = value;
					if ((value != null))
					{
						value.Movimentacaos.Add(this);
						this._IDCaixa = value.IDCaixa;
					}
					else
					{
						this._IDCaixa = default(Nullable<int>);
					}
					this.SendPropertyChanged("Caixa");
				}
			}
		}
		
		[Association(Name="Funcionario_Movimentacao", Storage="_Funcionario", ThisKey="IDFuncionario", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.Movimentacaos.Remove(this);
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.Movimentacaos.Add(this);
						this._IDFuncionario = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NotaFiscal")]
	public partial class NotaFiscal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDNotaFiscal;
		
		private System.Nullable<System.DateTime> _dataEmissao;
		
		private System.Nullable<int> _IDFuncionario;
		
		private System.Nullable<int> _IDFilial;
		
		private EntitySet<ItemNotaFiscal> _ItemNotaFiscals;
		
		private EntityRef<Funcionario> _Funcionario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDNotaFiscalChanging(int value);
    partial void OnIDNotaFiscalChanged();
    partial void OndataEmissaoChanging(System.Nullable<System.DateTime> value);
    partial void OndataEmissaoChanged();
    partial void OnIDFuncionarioChanging(System.Nullable<int> value);
    partial void OnIDFuncionarioChanged();
    partial void OnIDFilialChanging(System.Nullable<int> value);
    partial void OnIDFilialChanged();
    #endregion
		
		public NotaFiscal()
		{
			this._ItemNotaFiscals = new EntitySet<ItemNotaFiscal>(new Action<ItemNotaFiscal>(this.attach_ItemNotaFiscals), new Action<ItemNotaFiscal>(this.detach_ItemNotaFiscals));
			this._Funcionario = default(EntityRef<Funcionario>);
			OnCreated();
		}
		
		[Column(Storage="_IDNotaFiscal", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDNotaFiscal
		{
			get
			{
				return this._IDNotaFiscal;
			}
			set
			{
				if ((this._IDNotaFiscal != value))
				{
					this.OnIDNotaFiscalChanging(value);
					this.SendPropertyChanging();
					this._IDNotaFiscal = value;
					this.SendPropertyChanged("IDNotaFiscal");
					this.OnIDNotaFiscalChanged();
				}
			}
		}
		
		[Column(Storage="_dataEmissao", DbType="Date")]
		public System.Nullable<System.DateTime> dataEmissao
		{
			get
			{
				return this._dataEmissao;
			}
			set
			{
				if ((this._dataEmissao != value))
				{
					this.OndataEmissaoChanging(value);
					this.SendPropertyChanging();
					this._dataEmissao = value;
					this.SendPropertyChanged("dataEmissao");
					this.OndataEmissaoChanged();
				}
			}
		}
		
		[Column(Storage="_IDFuncionario", DbType="Int")]
		public System.Nullable<int> IDFuncionario
		{
			get
			{
				return this._IDFuncionario;
			}
			set
			{
				if ((this._IDFuncionario != value))
				{
					if (this._Funcionario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuncionarioChanging(value);
					this.SendPropertyChanging();
					this._IDFuncionario = value;
					this.SendPropertyChanged("IDFuncionario");
					this.OnIDFuncionarioChanged();
				}
			}
		}
		
		[Column(Storage="_IDFilial", DbType="Int")]
		public System.Nullable<int> IDFilial
		{
			get
			{
				return this._IDFilial;
			}
			set
			{
				if ((this._IDFilial != value))
				{
					this.OnIDFilialChanging(value);
					this.SendPropertyChanging();
					this._IDFilial = value;
					this.SendPropertyChanged("IDFilial");
					this.OnIDFilialChanged();
				}
			}
		}
		
		[Association(Name="NotaFiscal_ItemNotaFiscal", Storage="_ItemNotaFiscals", ThisKey="IDNotaFiscal", OtherKey="IDNotaFiscal")]
		public EntitySet<ItemNotaFiscal> ItemNotaFiscals
		{
			get
			{
				return this._ItemNotaFiscals;
			}
			set
			{
				this._ItemNotaFiscals.Assign(value);
			}
		}
		
		[Association(Name="Funcionario_NotaFiscal", Storage="_Funcionario", ThisKey="IDFuncionario", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.NotaFiscals.Remove(this);
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.NotaFiscals.Add(this);
						this._IDFuncionario = value.IDFuncionario;
					}
					else
					{
						this._IDFuncionario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemNotaFiscals(ItemNotaFiscal entity)
		{
			this.SendPropertyChanging();
			entity.NotaFiscal = this;
		}
		
		private void detach_ItemNotaFiscals(ItemNotaFiscal entity)
		{
			this.SendPropertyChanging();
			entity.NotaFiscal = null;
		}
	}
	
	[Table(Name="dbo.pais")]
	public partial class pai : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _IDPais;
		
		private string _Sigla;
		
		private string _Pais;
		
		private EntitySet<estado> _estados;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPaisChanging(short value);
    partial void OnIDPaisChanged();
    partial void OnSiglaChanging(string value);
    partial void OnSiglaChanged();
    partial void OnPaisChanging(string value);
    partial void OnPaisChanged();
    #endregion
		
		public pai()
		{
			this._estados = new EntitySet<estado>(new Action<estado>(this.attach_estados), new Action<estado>(this.detach_estados));
			OnCreated();
		}
		
		[Column(Storage="_IDPais", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short IDPais
		{
			get
			{
				return this._IDPais;
			}
			set
			{
				if ((this._IDPais != value))
				{
					this.OnIDPaisChanging(value);
					this.SendPropertyChanging();
					this._IDPais = value;
					this.SendPropertyChanged("IDPais");
					this.OnIDPaisChanged();
				}
			}
		}
		
		[Column(Storage="_Sigla", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Sigla
		{
			get
			{
				return this._Sigla;
			}
			set
			{
				if ((this._Sigla != value))
				{
					this.OnSiglaChanging(value);
					this.SendPropertyChanging();
					this._Sigla = value;
					this.SendPropertyChanged("Sigla");
					this.OnSiglaChanged();
				}
			}
		}
		
		[Column(Storage="_Pais", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pais
		{
			get
			{
				return this._Pais;
			}
			set
			{
				if ((this._Pais != value))
				{
					this.OnPaisChanging(value);
					this.SendPropertyChanging();
					this._Pais = value;
					this.SendPropertyChanged("Pais");
					this.OnPaisChanged();
				}
			}
		}
		
		[Association(Name="pai_estado", Storage="_estados", ThisKey="IDPais", OtherKey="IDPais")]
		public EntitySet<estado> estados
		{
			get
			{
				return this._estados;
			}
			set
			{
				this._estados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_estados(estado entity)
		{
			this.SendPropertyChanging();
			entity.pai = this;
		}
		
		private void detach_estados(estado entity)
		{
			this.SendPropertyChanging();
			entity.pai = null;
		}
	}
	
	[Table(Name="dbo.Pedido")]
	public partial class Pedido : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPedido;
		
		private System.Nullable<int> _IDEmpresa;
		
		private EntitySet<EspecificacaoPedido> _EspecificacaoPedidos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPedidoChanging(int value);
    partial void OnIDPedidoChanged();
    partial void OnIDEmpresaChanging(System.Nullable<int> value);
    partial void OnIDEmpresaChanged();
    #endregion
		
		public Pedido()
		{
			this._EspecificacaoPedidos = new EntitySet<EspecificacaoPedido>(new Action<EspecificacaoPedido>(this.attach_EspecificacaoPedidos), new Action<EspecificacaoPedido>(this.detach_EspecificacaoPedidos));
			OnCreated();
		}
		
		[Column(Storage="_IDPedido", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPedido
		{
			get
			{
				return this._IDPedido;
			}
			set
			{
				if ((this._IDPedido != value))
				{
					this.OnIDPedidoChanging(value);
					this.SendPropertyChanging();
					this._IDPedido = value;
					this.SendPropertyChanged("IDPedido");
					this.OnIDPedidoChanged();
				}
			}
		}
		
		[Column(Storage="_IDEmpresa", DbType="Int")]
		public System.Nullable<int> IDEmpresa
		{
			get
			{
				return this._IDEmpresa;
			}
			set
			{
				if ((this._IDEmpresa != value))
				{
					this.OnIDEmpresaChanging(value);
					this.SendPropertyChanging();
					this._IDEmpresa = value;
					this.SendPropertyChanged("IDEmpresa");
					this.OnIDEmpresaChanged();
				}
			}
		}
		
		[Association(Name="Pedido_EspecificacaoPedido", Storage="_EspecificacaoPedidos", ThisKey="IDPedido", OtherKey="IDPedido")]
		public EntitySet<EspecificacaoPedido> EspecificacaoPedidos
		{
			get
			{
				return this._EspecificacaoPedidos;
			}
			set
			{
				this._EspecificacaoPedidos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EspecificacaoPedidos(EspecificacaoPedido entity)
		{
			this.SendPropertyChanging();
			entity.Pedido = this;
		}
		
		private void detach_EspecificacaoPedidos(EspecificacaoPedido entity)
		{
			this.SendPropertyChanging();
			entity.Pedido = null;
		}
	}
	
	[Table(Name="dbo.Pessoa")]
	public partial class Pessoa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPessoa;
		
		private string _nome;
		
		private System.Nullable<System.DateTime> _dataNascimento;
		
		private EntityRef<Empresa> _Empresa;
		
		private EntityRef<Fornecedor> _Fornecedor;
		
		private EntityRef<Funcionario> _Funcionario;
		
		private EntityRef<Instituicao> _Instituicao;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPessoaChanging(int value);
    partial void OnIDPessoaChanged();
    partial void OnnomeChanging(string value);
    partial void OnnomeChanged();
    partial void OndataNascimentoChanging(System.Nullable<System.DateTime> value);
    partial void OndataNascimentoChanged();
    #endregion
		
		public Pessoa()
		{
			this._Empresa = default(EntityRef<Empresa>);
			this._Fornecedor = default(EntityRef<Fornecedor>);
			this._Funcionario = default(EntityRef<Funcionario>);
			this._Instituicao = default(EntityRef<Instituicao>);
			OnCreated();
		}
		
		[Column(Storage="_IDPessoa", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDPessoa
		{
			get
			{
				return this._IDPessoa;
			}
			set
			{
				if ((this._IDPessoa != value))
				{
					if (this._Fornecedor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPessoaChanging(value);
					this.SendPropertyChanging();
					this._IDPessoa = value;
					this.SendPropertyChanged("IDPessoa");
					this.OnIDPessoaChanged();
				}
			}
		}
		
		[Column(Storage="_nome", DbType="VarChar(150)")]
		public string nome
		{
			get
			{
				return this._nome;
			}
			set
			{
				if ((this._nome != value))
				{
					this.OnnomeChanging(value);
					this.SendPropertyChanging();
					this._nome = value;
					this.SendPropertyChanged("nome");
					this.OnnomeChanged();
				}
			}
		}
		
		[Column(Storage="_dataNascimento", DbType="Date")]
		public System.Nullable<System.DateTime> dataNascimento
		{
			get
			{
				return this._dataNascimento;
			}
			set
			{
				if ((this._dataNascimento != value))
				{
					this.OndataNascimentoChanging(value);
					this.SendPropertyChanging();
					this._dataNascimento = value;
					this.SendPropertyChanged("dataNascimento");
					this.OndataNascimentoChanged();
				}
			}
		}
		
		[Association(Name="Pessoa_Empresa", Storage="_Empresa", ThisKey="IDPessoa", OtherKey="IDEmpresa", IsUnique=true, IsForeignKey=false)]
		public Empresa Empresa
		{
			get
			{
				return this._Empresa.Entity;
			}
			set
			{
				Empresa previousValue = this._Empresa.Entity;
				if (((previousValue != value) 
							|| (this._Empresa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empresa.Entity = null;
						previousValue.Pessoa = null;
					}
					this._Empresa.Entity = value;
					if ((value != null))
					{
						value.Pessoa = this;
					}
					this.SendPropertyChanged("Empresa");
				}
			}
		}
		
		[Association(Name="Fornecedor_Pessoa", Storage="_Fornecedor", ThisKey="IDPessoa", OtherKey="IDFornecedor", IsForeignKey=true)]
		public Fornecedor Fornecedor
		{
			get
			{
				return this._Fornecedor.Entity;
			}
			set
			{
				Fornecedor previousValue = this._Fornecedor.Entity;
				if (((previousValue != value) 
							|| (this._Fornecedor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fornecedor.Entity = null;
						previousValue.Pessoa = null;
					}
					this._Fornecedor.Entity = value;
					if ((value != null))
					{
						value.Pessoa = this;
						this._IDPessoa = value.IDFornecedor;
					}
					else
					{
						this._IDPessoa = default(int);
					}
					this.SendPropertyChanged("Fornecedor");
				}
			}
		}
		
		[Association(Name="Funcionario_Pessoa", Storage="_Funcionario", ThisKey="IDPessoa", OtherKey="IDFuncionario", IsForeignKey=true)]
		public Funcionario Funcionario
		{
			get
			{
				return this._Funcionario.Entity;
			}
			set
			{
				Funcionario previousValue = this._Funcionario.Entity;
				if (((previousValue != value) 
							|| (this._Funcionario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Funcionario.Entity = null;
						previousValue.Pessoa = null;
					}
					this._Funcionario.Entity = value;
					if ((value != null))
					{
						value.Pessoa = this;
						this._IDPessoa = value.IDFuncionario;
					}
					else
					{
						this._IDPessoa = default(int);
					}
					this.SendPropertyChanged("Funcionario");
				}
			}
		}
		
		[Association(Name="Instituicao_Pessoa", Storage="_Instituicao", ThisKey="IDPessoa", OtherKey="IDInstituicao", IsForeignKey=true)]
		public Instituicao Instituicao
		{
			get
			{
				return this._Instituicao.Entity;
			}
			set
			{
				Instituicao previousValue = this._Instituicao.Entity;
				if (((previousValue != value) 
							|| (this._Instituicao.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instituicao.Entity = null;
						previousValue.Pessoa = null;
					}
					this._Instituicao.Entity = value;
					if ((value != null))
					{
						value.Pessoa = this;
						this._IDPessoa = value.IDInstituicao;
					}
					else
					{
						this._IDPessoa = default(int);
					}
					this.SendPropertyChanged("Instituicao");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Produto")]
	public partial class Produto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDProduto;
		
		private int _IDTipo;
		
		private string _descricao;
		
		private System.Nullable<int> _IDEspecificacao;
		
		private EntityRef<Especificacao> _Especificacao;
		
		private EntityRef<Tipo> _Tipo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDProdutoChanging(int value);
    partial void OnIDProdutoChanged();
    partial void OnIDTipoChanging(int value);
    partial void OnIDTipoChanged();
    partial void OndescricaoChanging(string value);
    partial void OndescricaoChanged();
    partial void OnIDEspecificacaoChanging(System.Nullable<int> value);
    partial void OnIDEspecificacaoChanged();
    #endregion
		
		public Produto()
		{
			this._Especificacao = default(EntityRef<Especificacao>);
			this._Tipo = default(EntityRef<Tipo>);
			OnCreated();
		}
		
		[Column(Storage="_IDProduto", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDProduto
		{
			get
			{
				return this._IDProduto;
			}
			set
			{
				if ((this._IDProduto != value))
				{
					this.OnIDProdutoChanging(value);
					this.SendPropertyChanging();
					this._IDProduto = value;
					this.SendPropertyChanged("IDProduto");
					this.OnIDProdutoChanged();
				}
			}
		}
		
		[Column(Storage="_IDTipo", DbType="Int NOT NULL")]
		public int IDTipo
		{
			get
			{
				return this._IDTipo;
			}
			set
			{
				if ((this._IDTipo != value))
				{
					if (this._Tipo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTipoChanging(value);
					this.SendPropertyChanging();
					this._IDTipo = value;
					this.SendPropertyChanged("IDTipo");
					this.OnIDTipoChanged();
				}
			}
		}
		
		[Column(Storage="_descricao", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string descricao
		{
			get
			{
				return this._descricao;
			}
			set
			{
				if ((this._descricao != value))
				{
					this.OndescricaoChanging(value);
					this.SendPropertyChanging();
					this._descricao = value;
					this.SendPropertyChanged("descricao");
					this.OndescricaoChanged();
				}
			}
		}
		
		[Column(Storage="_IDEspecificacao", DbType="Int")]
		public System.Nullable<int> IDEspecificacao
		{
			get
			{
				return this._IDEspecificacao;
			}
			set
			{
				if ((this._IDEspecificacao != value))
				{
					if (this._Especificacao.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEspecificacaoChanging(value);
					this.SendPropertyChanging();
					this._IDEspecificacao = value;
					this.SendPropertyChanged("IDEspecificacao");
					this.OnIDEspecificacaoChanged();
				}
			}
		}
		
		[Association(Name="Especificacao_Produto", Storage="_Especificacao", ThisKey="IDEspecificacao", OtherKey="IDEspecificacao", IsForeignKey=true)]
		public Especificacao Especificacao
		{
			get
			{
				return this._Especificacao.Entity;
			}
			set
			{
				Especificacao previousValue = this._Especificacao.Entity;
				if (((previousValue != value) 
							|| (this._Especificacao.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especificacao.Entity = null;
						previousValue.Produtos.Remove(this);
					}
					this._Especificacao.Entity = value;
					if ((value != null))
					{
						value.Produtos.Add(this);
						this._IDEspecificacao = value.IDEspecificacao;
					}
					else
					{
						this._IDEspecificacao = default(Nullable<int>);
					}
					this.SendPropertyChanged("Especificacao");
				}
			}
		}
		
		[Association(Name="Tipo_Produto", Storage="_Tipo", ThisKey="IDTipo", OtherKey="IDTipo", IsForeignKey=true)]
		public Tipo Tipo
		{
			get
			{
				return this._Tipo.Entity;
			}
			set
			{
				Tipo previousValue = this._Tipo.Entity;
				if (((previousValue != value) 
							|| (this._Tipo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tipo.Entity = null;
						previousValue.Produtos.Remove(this);
					}
					this._Tipo.Entity = value;
					if ((value != null))
					{
						value.Produtos.Add(this);
						this._IDTipo = value.IDTipo;
					}
					else
					{
						this._IDTipo = default(int);
					}
					this.SendPropertyChanged("Tipo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SAC")]
	public partial class SAC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDSAC;
		
		private System.Nullable<int> _IDEmpresa;
		
		private string _nome;
		
		private string _assunto;
		
		private string _email;
		
		private string _telefone;
		
		private string _mensagem;
		
		private EntityRef<Empresa> _Empresa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSACChanging(int value);
    partial void OnIDSACChanged();
    partial void OnIDEmpresaChanging(System.Nullable<int> value);
    partial void OnIDEmpresaChanged();
    partial void OnnomeChanging(string value);
    partial void OnnomeChanged();
    partial void OnassuntoChanging(string value);
    partial void OnassuntoChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntelefoneChanging(string value);
    partial void OntelefoneChanged();
    partial void OnmensagemChanging(string value);
    partial void OnmensagemChanged();
    #endregion
		
		public SAC()
		{
			this._Empresa = default(EntityRef<Empresa>);
			OnCreated();
		}
		
		[Column(Storage="_IDSAC", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDSAC
		{
			get
			{
				return this._IDSAC;
			}
			set
			{
				if ((this._IDSAC != value))
				{
					this.OnIDSACChanging(value);
					this.SendPropertyChanging();
					this._IDSAC = value;
					this.SendPropertyChanged("IDSAC");
					this.OnIDSACChanged();
				}
			}
		}
		
		[Column(Storage="_IDEmpresa", DbType="Int")]
		public System.Nullable<int> IDEmpresa
		{
			get
			{
				return this._IDEmpresa;
			}
			set
			{
				if ((this._IDEmpresa != value))
				{
					if (this._Empresa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEmpresaChanging(value);
					this.SendPropertyChanging();
					this._IDEmpresa = value;
					this.SendPropertyChanged("IDEmpresa");
					this.OnIDEmpresaChanged();
				}
			}
		}
		
		[Column(Storage="_nome", DbType="VarChar(50)")]
		public string nome
		{
			get
			{
				return this._nome;
			}
			set
			{
				if ((this._nome != value))
				{
					this.OnnomeChanging(value);
					this.SendPropertyChanging();
					this._nome = value;
					this.SendPropertyChanged("nome");
					this.OnnomeChanged();
				}
			}
		}
		
		[Column(Storage="_assunto", DbType="VarChar(150)")]
		public string assunto
		{
			get
			{
				return this._assunto;
			}
			set
			{
				if ((this._assunto != value))
				{
					this.OnassuntoChanging(value);
					this.SendPropertyChanging();
					this._assunto = value;
					this.SendPropertyChanged("assunto");
					this.OnassuntoChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="VarChar(150)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_telefone", DbType="VarChar(10)")]
		public string telefone
		{
			get
			{
				return this._telefone;
			}
			set
			{
				if ((this._telefone != value))
				{
					this.OntelefoneChanging(value);
					this.SendPropertyChanging();
					this._telefone = value;
					this.SendPropertyChanged("telefone");
					this.OntelefoneChanged();
				}
			}
		}
		
		[Column(Storage="_mensagem", DbType="VarChar(200)")]
		public string mensagem
		{
			get
			{
				return this._mensagem;
			}
			set
			{
				if ((this._mensagem != value))
				{
					this.OnmensagemChanging(value);
					this.SendPropertyChanging();
					this._mensagem = value;
					this.SendPropertyChanged("mensagem");
					this.OnmensagemChanged();
				}
			}
		}
		
		[Association(Name="Empresa_SAC", Storage="_Empresa", ThisKey="IDEmpresa", OtherKey="IDEmpresa", IsForeignKey=true)]
		public Empresa Empresa
		{
			get
			{
				return this._Empresa.Entity;
			}
			set
			{
				Empresa previousValue = this._Empresa.Entity;
				if (((previousValue != value) 
							|| (this._Empresa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empresa.Entity = null;
						previousValue.SACs.Remove(this);
					}
					this._Empresa.Entity = value;
					if ((value != null))
					{
						value.SACs.Add(this);
						this._IDEmpresa = value.IDEmpresa;
					}
					else
					{
						this._IDEmpresa = default(Nullable<int>);
					}
					this.SendPropertyChanged("Empresa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Telefone")]
	public partial class Telefone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDTelefone;
		
		private System.Nullable<int> _codigoPais;
		
		private System.Nullable<int> _ddd;
		
		private System.Nullable<int> _numero;
		
		private string _descricao;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTelefoneChanging(int value);
    partial void OnIDTelefoneChanged();
    partial void OncodigoPaisChanging(System.Nullable<int> value);
    partial void OncodigoPaisChanged();
    partial void OndddChanging(System.Nullable<int> value);
    partial void OndddChanged();
    partial void OnnumeroChanging(System.Nullable<int> value);
    partial void OnnumeroChanged();
    partial void OndescricaoChanging(string value);
    partial void OndescricaoChanged();
    #endregion
		
		public Telefone()
		{
			OnCreated();
		}
		
		[Column(Storage="_IDTelefone", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDTelefone
		{
			get
			{
				return this._IDTelefone;
			}
			set
			{
				if ((this._IDTelefone != value))
				{
					this.OnIDTelefoneChanging(value);
					this.SendPropertyChanging();
					this._IDTelefone = value;
					this.SendPropertyChanged("IDTelefone");
					this.OnIDTelefoneChanged();
				}
			}
		}
		
		[Column(Storage="_codigoPais", DbType="Int")]
		public System.Nullable<int> codigoPais
		{
			get
			{
				return this._codigoPais;
			}
			set
			{
				if ((this._codigoPais != value))
				{
					this.OncodigoPaisChanging(value);
					this.SendPropertyChanging();
					this._codigoPais = value;
					this.SendPropertyChanged("codigoPais");
					this.OncodigoPaisChanged();
				}
			}
		}
		
		[Column(Storage="_ddd", DbType="Int")]
		public System.Nullable<int> ddd
		{
			get
			{
				return this._ddd;
			}
			set
			{
				if ((this._ddd != value))
				{
					this.OndddChanging(value);
					this.SendPropertyChanging();
					this._ddd = value;
					this.SendPropertyChanged("ddd");
					this.OndddChanged();
				}
			}
		}
		
		[Column(Storage="_numero", DbType="Int")]
		public System.Nullable<int> numero
		{
			get
			{
				return this._numero;
			}
			set
			{
				if ((this._numero != value))
				{
					this.OnnumeroChanging(value);
					this.SendPropertyChanging();
					this._numero = value;
					this.SendPropertyChanged("numero");
					this.OnnumeroChanged();
				}
			}
		}
		
		[Column(Storage="_descricao", DbType="VarChar(50)")]
		public string descricao
		{
			get
			{
				return this._descricao;
			}
			set
			{
				if ((this._descricao != value))
				{
					this.OndescricaoChanging(value);
					this.SendPropertyChanging();
					this._descricao = value;
					this.SendPropertyChanged("descricao");
					this.OndescricaoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TelefonePessoa")]
	public partial class TelefonePessoa
	{
		
		private System.Nullable<int> _IDPessoa;
		
		private System.Nullable<int> _IDTelefone;
		
		public TelefonePessoa()
		{
		}
		
		[Column(Storage="_IDPessoa", DbType="Int")]
		public System.Nullable<int> IDPessoa
		{
			get
			{
				return this._IDPessoa;
			}
			set
			{
				if ((this._IDPessoa != value))
				{
					this._IDPessoa = value;
				}
			}
		}
		
		[Column(Storage="_IDTelefone", DbType="Int")]
		public System.Nullable<int> IDTelefone
		{
			get
			{
				return this._IDTelefone;
			}
			set
			{
				if ((this._IDTelefone != value))
				{
					this._IDTelefone = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Tipo")]
	public partial class Tipo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDTipo;
		
		private string _descricao;
		
		private EntitySet<Produto> _Produtos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTipoChanging(int value);
    partial void OnIDTipoChanged();
    partial void OndescricaoChanging(string value);
    partial void OndescricaoChanged();
    #endregion
		
		public Tipo()
		{
			this._Produtos = new EntitySet<Produto>(new Action<Produto>(this.attach_Produtos), new Action<Produto>(this.detach_Produtos));
			OnCreated();
		}
		
		[Column(Storage="_IDTipo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDTipo
		{
			get
			{
				return this._IDTipo;
			}
			set
			{
				if ((this._IDTipo != value))
				{
					this.OnIDTipoChanging(value);
					this.SendPropertyChanging();
					this._IDTipo = value;
					this.SendPropertyChanged("IDTipo");
					this.OnIDTipoChanged();
				}
			}
		}
		
		[Column(Storage="_descricao", DbType="VarChar(50)")]
		public string descricao
		{
			get
			{
				return this._descricao;
			}
			set
			{
				if ((this._descricao != value))
				{
					this.OndescricaoChanging(value);
					this.SendPropertyChanging();
					this._descricao = value;
					this.SendPropertyChanged("descricao");
					this.OndescricaoChanged();
				}
			}
		}
		
		[Association(Name="Tipo_Produto", Storage="_Produtos", ThisKey="IDTipo", OtherKey="IDTipo")]
		public EntitySet<Produto> Produtos
		{
			get
			{
				return this._Produtos;
			}
			set
			{
				this._Produtos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Produtos(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = this;
		}
		
		private void detach_Produtos(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = null;
		}
	}
	
	[Table(Name="dbo.Usuario")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _login;
		
		private System.Data.Linq.Binary _senha;
		
		private int _IDLogin;
		
		private EntitySet<Funcionario> _Funcionarios;
		
		private EntityRef<Cliente> _Cliente;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnsenhaChanging(System.Data.Linq.Binary value);
    partial void OnsenhaChanged();
    partial void OnIDLoginChanging(int value);
    partial void OnIDLoginChanged();
    #endregion
		
		public Usuario()
		{
			this._Funcionarios = new EntitySet<Funcionario>(new Action<Funcionario>(this.attach_Funcionarios), new Action<Funcionario>(this.detach_Funcionarios));
			this._Cliente = default(EntityRef<Cliente>);
			OnCreated();
		}
		
		[Column(Storage="_login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[Column(Storage="_senha", DbType="VarBinary(4000)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary senha
		{
			get
			{
				return this._senha;
			}
			set
			{
				if ((this._senha != value))
				{
					this.OnsenhaChanging(value);
					this.SendPropertyChanging();
					this._senha = value;
					this.SendPropertyChanged("senha");
					this.OnsenhaChanged();
				}
			}
		}
		
		[Column(Storage="_IDLogin", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDLogin
		{
			get
			{
				return this._IDLogin;
			}
			set
			{
				if ((this._IDLogin != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLoginChanging(value);
					this.SendPropertyChanging();
					this._IDLogin = value;
					this.SendPropertyChanged("IDLogin");
					this.OnIDLoginChanged();
				}
			}
		}
		
		[Association(Name="Usuario_Funcionario", Storage="_Funcionarios", ThisKey="IDLogin", OtherKey="IDUsuario")]
		public EntitySet<Funcionario> Funcionarios
		{
			get
			{
				return this._Funcionarios;
			}
			set
			{
				this._Funcionarios.Assign(value);
			}
		}
		
		[Association(Name="Cliente_Usuario", Storage="_Cliente", ThisKey="IDLogin", OtherKey="IDCliente", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.Usuario = null;
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.Usuario = this;
						this._IDLogin = value.IDCliente;
					}
					else
					{
						this._IDLogin = default(int);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Funcionarios(Funcionario entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Funcionarios(Funcionario entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
	}
}
#pragma warning restore 1591
